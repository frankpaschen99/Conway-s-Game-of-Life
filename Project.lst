Microsoft (R) Macro Assembler Version 14.16.27026.1	    04/27/19 00:04:01
Source.asm						     Page 1 - 1


				; Conway's Game of Life
				; by frank paschen :)

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				.386
				.model flat,stdcall
Source.asm(6) : warning A4011:multiple .MODEL directives found : .MODEL ignored
				.stack 4096
				ExitProcess proto,dwExitCode:dword

 00000000			.data
 00000000 47 45 4E 45 52		genMsg BYTE "GENERATION #", 0
	   41 54 49 4F 4E
	   20 23 00
 0000000D 0000				genCount SWORD 0

					; Main game board array that will be drawn to the console
 0000000F  00000014 [			GameBoard BYTE 20 DUP(0)
	    00
	   ]
 00000023 = 00000014			Rowsize = ($ - GameBoard)
 00000023  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000037  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 0000004B  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 0000005F  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000073  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000087  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 0000009B  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 000000AF  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 000000C3  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 000000D7  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 000000EB  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 000000FF  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000113  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000127  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 0000013B  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 0000014F  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000163  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000177  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 0000018B  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]

				;-----------------------------------------------------
				; CalculateGeneration
				;
				; Calculates next game board based on game's rules
				; Called each gamestep
				; Receives: N/A
				;
				; Returns: N/A
				;-----------------------------------------------------
 0000019F 00			cellState BYTE 0	; 1 or 0, living or dead
 000001A0 00000000		yCoord4 DWORD 0
 000001A4 00000000		xCoord4 DWORD 0
 000001A8 00000000		count4 DWORD 0
 000001AC 00000000		liveCount2 DWORD 0
 00000000			.code
 00000000			CalculateGeneration PROC USES ecx

					; copy the gameboard to the backup board

					; LOOP
						; 1. Iterate through the board and calculate the # of living neighbors for each cell
						; 2. Implement GoL rules and update the backup board based on the # of living neighbors
					; Copy the backup board into the gameboard
 00000000  51		   *	    push   ecx
 00000001  B9 00000014			mov ecx, 20

 00000006				L1:
 00000006  89 0D 000001A8 R			mov count4, ecx
 0000000C  B9 00000014				mov ecx, 20
 00000011					L2:

 00000011  8B 15 000001A0 R				mov edx, yCoord4 ; y
 00000017  A1 000001A4 R				mov eax, xCoord4 ; x
							;call GetValueAtCoords ; result stored in al
							;mov cellState, al	; used for implementing rules

 0000001C  E8 00000026					call CalcLivingNeighbors
							;call DumpRegs
							;mov liveCount2, ebx


 00000021  FF 05 000001A4 R				inc xCoord4
 00000027  E2 E8				loop L2
 00000029  8B 0D 000001A8 R				mov ecx, count4
 0000002F  E2 D5			loop L1
					
 00000031  C7 05 000001A0 R		mov yCoord4, 0
	   00000000
 0000003B  C7 05 000001A4 R		mov xCoord4, 0
	   00000000

					ret
 00000045  59		   *	    pop    ecx
 00000046  C3		   *	    ret    00000h
 00000047			CalculateGeneration ENDP

				;-----------------------------------------------------
				; CalcLivingNeighbors
				;
				; Returns number of "living" neighbors for any given cell. Between 0 and 8
				; Receives: edx = y coordinate
				;			eax = x coordinate
				; 
				; Returns: ebx = # of living neighbors
				;-----------------------------------------------------
 000001B0			.data
 000001B0 00000000		liveCount DWORD 0	; stores # of living neighbors for each cell
 000001B4 00000000		originalX DWORD 0
 000001B8 00000000		originalY DWORD 0
 00000047			.code
 00000047			CalcLivingNeighbors PROC
 00000047  A3 000001B4 R		mov originalX, eax
 0000004C  89 15 000001B8 R		mov originalY, edx
 00000052  BB 00000000			mov ebx, 0

 00000057  A1 000001B4 R		mov eax, originalX
 0000005C  8B 15 000001B8 R		mov edx, originalY
 00000062  E8 0000025F			call GetBottomLeft
					.IF (al == 0) || (al == 1)
 00000067  0A C0	   *	    or	al, al
 00000069  74 04	   *	    je	@C0002
 0000006B  3C 01	   *	    cmp    al, 001h
 0000006D  75 06	   *	    jne    @C0001
 0000006F		   *@C0002:
 0000006F  01 05 000001B0 R			add liveCount, eax
					.ENDIF
 00000075		   *@C0001:

 00000075  A1 000001B4 R		mov eax, originalX
 0000007A  8B 15 000001B8 R		mov edx, originalY
 00000080  E8 00000254			call GetBottomCenter
					.IF (al == 0) || (al == 1)
 00000085  0A C0	   *	    or	al, al
 00000087  74 04	   *	    je	@C0005
 00000089  3C 01	   *	    cmp    al, 001h
 0000008B  75 06	   *	    jne    @C0004
 0000008D		   *@C0005:
 0000008D  01 05 000001B0 R			add liveCount, eax
					.ENDIF
 00000093		   *@C0004:

 00000093  A1 000001B4 R		mov eax, originalX
 00000098  8B 15 000001B8 R		mov edx, originalY
 0000009E  E8 00000244			call GetBottomRight
					.IF (al == 0) || (al == 1)
 000000A3  0A C0	   *	    or	al, al
 000000A5  74 04	   *	    je	@C0008
 000000A7  3C 01	   *	    cmp    al, 001h
 000000A9  75 06	   *	    jne    @C0007
 000000AB		   *@C0008:
 000000AB  01 05 000001B0 R			add liveCount, eax
					.ENDIF
 000000B1		   *@C0007:

 000000B1  A1 000001B4 R		mov eax, originalX
 000000B6  8B 15 000001B8 R		mov edx, originalY
 000000BC  E8 00000247			call GetRight
					.IF (al == 0) || (al == 1)
 000000C1  0A C0	   *	    or	al, al
 000000C3  74 04	   *	    je	@C000B
 000000C5  3C 01	   *	    cmp    al, 001h
 000000C7  75 06	   *	    jne    @C000A
 000000C9		   *@C000B:
 000000C9  01 05 000001B0 R			add liveCount, eax
					.ENDIF
 000000CF		   *@C000A:

 000000CF  A1 000001B4 R		mov eax, originalX
 000000D4  8B 15 000001B8 R		mov edx, originalY
 000000DA  E8 0000021C			call GetLeft
					.IF (al == 0) || (al == 1)
 000000DF  0A C0	   *	    or	al, al
 000000E1  74 04	   *	    je	@C000E
 000000E3  3C 01	   *	    cmp    al, 001h
 000000E5  75 06	   *	    jne    @C000D
 000000E7		   *@C000E:
 000000E7  01 05 000001B0 R			add liveCount, eax
					.ENDIF
 000000ED		   *@C000D:

 000000ED  A1 000001B4 R		mov eax, originalX
 000000F2  8B 15 000001B8 R		mov edx, originalY
 000000F8  E8 00000219			call GetTopLeft
					.IF (al == 0) || (al == 1)
 000000FD  0A C0	   *	    or	al, al
 000000FF  74 04	   *	    je	@C0011
 00000101  3C 01	   *	    cmp    al, 001h
 00000103  75 06	   *	    jne    @C0010
 00000105		   *@C0011:
 00000105  01 05 000001B0 R			add liveCount, eax
					.ENDIF
 0000010B		   *@C0010:

 0000010B  A1 000001B4 R		mov eax, originalX
 00000110  8B 15 000001B8 R		mov edx, originalY
 00000116  E8 0000020D			call GetTopCenter
					.IF (al == 0) || (al == 1)
 0000011B  0A C0	   *	    or	al, al
 0000011D  74 04	   *	    je	@C0014
 0000011F  3C 01	   *	    cmp    al, 001h
 00000121  75 06	   *	    jne    @C0013
 00000123		   *@C0014:
 00000123  01 05 000001B0 R			add liveCount, eax
					.ENDIF
 00000129		   *@C0013:

 00000129  A1 000001B4 R		mov eax, originalX
 0000012E  8B 15 000001B8 R		mov edx, originalY
 00000134  E8 000001FE			call GetTopRight
					.IF (al == 0) || (al == 1)
 00000139  0A C0	   *	    or	al, al
 0000013B  74 04	   *	    je	@C0017
 0000013D  3C 01	   *	    cmp    al, 001h
 0000013F  75 06	   *	    jne    @C0016
 00000141		   *@C0017:
 00000141  01 05 000001B0 R			add liveCount, eax
					.ENDIF
 00000147		   *@C0016:

 00000147  8B 1D 000001B0 R		mov ebx, liveCount
 0000014D  C3				ret
 0000014E			CalcLivingNeighbors ENDP

				;-----------------------------------------------------
				; GenRandomBoard
				;
				; Sets random cells in the gameboard to living or dead.
				; Called before first generation
				; Receives: N/A
				;
				; Returns: N/A
				;-----------------------------------------------------
 000001BC			.data
 000001BC 00000000			yCoord3 DWORD 0
 000001C0 00000000			xCoord3 DWORD 0
 000001C4 00000000			count3 DWORD 0
 000001C8 00000000			randVal DWORD 0
 0000014E			.code
 0000014E			GenRandomBoard PROC
 0000014E  B9 00000014			mov ecx, 20

 00000153				L1:	; outer loop
 00000153  89 0D 000001C4 R			mov count3, ecx
 00000159  B9 00000014				mov ecx, 20
 0000015E					L2: ; inner loop

 0000015E  8B 15 000001BC R				mov edx, yCoord3	; y
 00000164  A1 000001C0 R				mov eax, xCoord3 ; x

							; preserve eax to use RandomRange
 00000169  50						push eax
 0000016A  B8 00000002					mov eax, 2

 0000016F  E8 00000000 E				call RandomRange
 00000174  A3 000001C8 R				mov randVal, eax
 00000179  58						pop eax

							.IF randVal > 0
 0000017A  83 3D 000001C8 R
	   00		   *	    cmp    randVal, 000h
 00000181  76 05	   *	    jbe    @C0019
 00000183  E8 000000FE						call InvertValueAtCoords
							.ENDIF
 00000188		   *@C0019:

 00000188  E8 000000CC					call GetValueAtCoords

 0000018D  FF 05 000001C0 R				inc xCoord3
 00000193  E2 C9				loop L2
 00000195  8B 0D 000001C4 R				mov ecx, count3
 0000019B  E2 B6			loop L1
					
 0000019D  C7 05 000001BC R		mov yCoord3, 0
	   00000000
 000001A7  C7 05 000001C0 R		mov xCoord3, 0
	   00000000

 000001B1  C3				ret
 000001B2			GenRandomBoard ENDP
				;-----------------------------------------------------
				; DrawGameBoard
				;
				; Uses cursor to print the gameboard to the console.
				; Called immediately after CalculateGeneration
				; Receives: N/A
				;
				; Returns: N/A
				;-----------------------------------------------------

 000001CC			.data
 000001CC 00000000			yCoord DWORD 0
 000001D0 00000000			xCoord DWORD 0
 000001D4 00000000			count DWORD 0
 000001D8 00				temp BYTE ?
 000001B2			.code
 000001B2			DrawGameBoard PROC USES ecx
 000001B2  51		   *	    push   ecx
 000001B3  E8 00000000 E		call Clrscr
 000001B8  E8 00000000 E		call Crlf
 000001BD  B9 00000014			mov ecx, 20

 000001C2				L1:	; outer loop
 000001C2  89 0D 000001D4 R			mov count, ecx
 000001C8  B9 00000014				mov ecx, 20
 000001CD					L2: ; inner loop

 000001CD  8B 15 000001CC R				mov edx, yCoord	; y
 000001D3  A1 000001D0 R				mov eax, xCoord	; x

 000001D8  E8 0000007C					call GetValueAtCoords
							
							; TODO: Color these, possible find better ASCII characters
 000001DD  A2 000001D8 R				mov temp, al
							.IF temp == 0
 000001E2  80 3D 000001D8 R
	   00		   *	    cmp    temp, 000h
 000001E9  75 04	   *	    jne    @C001B
 000001EB  B0 B2						mov al, 178
							.ELSEIF temp == 1
 000001ED  EB 0B	   *	    jmp    @C001D
 000001EF		   *@C001B:
 000001EF  80 3D 000001D8 R
	   01		   *	    cmp    temp, 001h
 000001F6  75 02	   *	    jne    @C001E
 000001F8  B0 B0						mov al, 176
							.ENDIF
 000001FA		   *@C001E:
 000001FA		   *@C001D:

 000001FA  E8 00000000 E				call WriteChar

 000001FF  FF 05 000001D0 R				inc xCoord

 00000205  E2 C6				loop L2
 00000207  8B 0D 000001D4 R				mov ecx, count
 0000020D  E8 00000000 E				call Crlf
 00000212  E2 AE			loop L1

 00000214  C7 05 000001CC R		mov yCoord, 0
	   00000000
 0000021E  C7 05 000001D0 R		mov xCoord, 0
	   00000000
					
					ret
 00000228  59		   *	    pop    ecx
 00000229  C3		   *	    ret    00000h
 0000022A			DrawGameBoard ENDP
				;-----------------------------------------------------
				; IncrementGeneration
				;
				; Prints and increments the generation count.
				; Called immediately after CalculateGeneration
				; Receives: N/A
				;
				; Returns: N/A
				;-----------------------------------------------------
 0000022A			IncrementGeneration PROC USES eax edx
 0000022A  50		   *	    push   eax
 0000022B  52		   *	    push   edx
 0000022C  B8 00000000			mov eax, 0
					; increment gen count
 00000231  66| FF 05			inc genCount
	   0000000D R
					; move cursor to top left
 00000238  B6 00			mov dh, 0	; Y
 0000023A  B2 00			mov dl, 0	; X
 0000023C  E8 00000000 E		call Gotoxy
					; print Generation #:
 00000241  BA 00000000 R		mov edx, OFFSET genMsg
 00000246  E8 00000000 E		call WriteString      
					; print actual gen count
 0000024B  66| A1			mov ax, genCount
	   0000000D R

 00000251  E8 00000000 E		call WriteDec

					ret
 00000256  5A		   *	    pop    edx
 00000257  58		   *	    pop    eax
 00000258  C3		   *	    ret    00000h
 00000259			IncrementGeneration ENDP
				;-----------------------------------------------------
				; GetValueAtCoords
				;
				; Returns value found at index in gameboard.
				; Receives: edx = y coordinate
				;			eax = x coordinate
				; 
				; Returns: al = value at coordinates in array (zero indexed)
				;-----------------------------------------------------
 000001D9			.data
 000001D9 00000000			yIndex DWORD ?
 000001DD 00000000			xIndex DWORD ?
 00000259			.code
 00000259			GetValueAtCoords PROC USES esi ebx
 00000259  56		   *	    push   esi
 0000025A  53		   *	    push   ebx
 0000025B  89 15 000001D9 R		mov yIndex, edx
 00000261  A3 000001DD R		mov xIndex, eax

					; store array offset in memory
 00000266  BB 0000000F R		mov ebx, OFFSET GameBoard ; table offset
					; multiply RowSize and y coordinate
 0000026B  B8 00000014			mov eax, RowSize
 00000270  F7 25 000001D9 R		mul yIndex	; result of AL * DH stored in EAX
 00000276  03 D8			add ebx, eax ; row offset
					; add offset and x coordinate to get [X,Y] in array
 00000278  8B 35 000001DD R		mov esi, xIndex
 0000027E  B4 00			mov ah, 0	; clear top half of reg NOTE: ONLY NECESSARY FOR WRITEINT PROC. We can just test al for other purposes
 00000280  8A 04 33			mov al, [ebx + esi] ; al = result

					ret
 00000283  5B		   *	    pop    ebx
 00000284  5E		   *	    pop    esi
 00000285  C3		   *	    ret    00000h
 00000286			GetValueAtCoords ENDP

				;-----------------------------------------------------
				; GetValueAtCoords
				;
				; Inverts value found at index in gameboard.
				; Receives: edx = y coordinate
				;			eax = x coordinate
				; 
				; Returns: N/A
				;-----------------------------------------------------
 000001E1			.data
 000001E1 00000000			yIndex2 DWORD ?
 000001E5 00000000			xIndex2 DWORD ?
 00000286			.code
 00000286			InvertValueAtCoords PROC USES edx eax ebx
 00000286  52		   *	    push   edx
 00000287  50		   *	    push   eax
 00000288  53		   *	    push   ebx
 00000289  89 15 000001E1 R		mov yIndex2, edx
 0000028F  A3 000001E5 R		mov xIndex2, eax

					; same exact thing as GetValueAtCoords
 00000294  BB 0000000F R		mov ebx, OFFSET GameBoard
 00000299  B8 00000014			mov eax, RowSize
 0000029E  F7 25 000001E1 R		mul yIndex2
 000002A4  03 D8			add ebx, eax
 000002A6  8B 35 000001E5 R		mov esi, xIndex2
 000002AC  B4 00			mov ah, 0
 000002AE  8A 04 33			mov al, [ebx + esi]

					; invert last bit in AL
					; couldnt figure out a better way to do this
					.IF al == 0001h
 000002B1  3C 01	   *	    cmp    al, 001h
 000002B3  75 04	   *	    jne    @C0020
 000002B5  B0 00				mov al, 0000
					.ELSEIF al == 0000h
 000002B7  EB 06	   *	    jmp    @C0022
 000002B9		   *@C0020:
 000002B9  0A C0	   *	    or	al, al
 000002BB  75 02	   *	    jne    @C0023
 000002BD  B0 01				mov al, 0001h
					.ENDIF
 000002BF		   *@C0023:
 000002BF		   *@C0022:
					
					; move the new value to the array
 000002BF  88 04 33			mov [ebx+esi], al
					ret
 000002C2  5B		   *	    pop    ebx
 000002C3  58		   *	    pop    eax
 000002C4  5A		   *	    pop    edx
 000002C5  C3		   *	    ret    00000h
 000002C6			InvertValueAtCoords ENDP

				;-----------------------------------------------------
				; Helper functions for calculating # of living cells
				; Receives: edx = y coordinate
				;			eax = x coordinate
				; 
				; Returns: al = value at coordinates in array (zero indexed)
				;-----------------------------------------------------
 000002C6			.code
 000002C6			GetBottomLeft PROC
					.IF eax == 0 || edx == 19
 000002C6  0B C0	   *	    or	eax, eax
 000002C8  74 05	   *	    je	@C0026
 000002CA  83 FA 13	   *	    cmp    edx, 013h
 000002CD  75 02	   *	    jne    @C0025
 000002CF		   *@C0026:
 000002CF  EB 07				jmp L1
					.ENDIF
 000002D1		   *@C0025:
 000002D1  48				dec eax
 000002D2  42				inc edx
 000002D3  E8 FFFFFF81			call GetValueAtCoords
 000002D8				L1:
 000002D8  C3				ret
 000002D9			GetBottomLeft ENDP

 000002D9			GetBottomCenter PROC
					.IF edx == 19
 000002D9  83 FA 13	   *	    cmp    edx, 013h
 000002DC  75 02	   *	    jne    @C0028
 000002DE  EB 06				jmp L1
					.ENDIF
 000002E0		   *@C0028:
 000002E0  42				inc edx
 000002E1  E8 FFFFFF73			call GetValueAtCoords
 000002E6				L1:
 000002E6  C3				ret
 000002E7			GetBottomCenter ENDP

 000002E7			GetBottomRight PROC
					.IF edx == 19 || eax == 19
 000002E7  83 FA 13	   *	    cmp    edx, 013h
 000002EA  74 05	   *	    je	@C002B
 000002EC  83 F8 13	   *	    cmp    eax, 013h
 000002EF  75 02	   *	    jne    @C002A
 000002F1		   *@C002B:
 000002F1  EB 07				jmp L1
					.ENDIF
 000002F3		   *@C002A:
 000002F3  40				inc eax
 000002F4  42				inc edx
 000002F5  E8 FFFFFF5F			call GetValueAtCoords
 000002FA				L1:
 000002FA  C3				ret
 000002FB			GetBottomRight ENDP

 000002FB			GetLeft PROC
					.IF eax == 0
 000002FB  0B C0	   *	    or	eax, eax
 000002FD  75 02	   *	    jne    @C002D
 000002FF  EB 06				jmp L1
					.ENDIF
 00000301		   *@C002D:
 00000301  48				dec eax

 00000302  E8 FFFFFF52			call GetValueAtCoords
 00000307				L1:
 00000307  C3				ret
 00000308			GetLeft ENDP

 00000308			GetRight PROC
					.IF eax == 19
 00000308  83 F8 13	   *	    cmp    eax, 013h
 0000030B  75 02	   *	    jne    @C002F
 0000030D  EB 06				jmp L1
					.ENDIF
 0000030F		   *@C002F:
 0000030F  40				inc eax
 00000310  E8 FFFFFF44			call GetValueAtCoords
 00000315				L1:
 00000315  C3				ret
 00000316			GetRight ENDP

 00000316			GetTopLeft PROC
					.IF edx == 0 || eax == 0
 00000316  0B D2	   *	    or	edx, edx
 00000318  74 04	   *	    je	@C0032
 0000031A  0B C0	   *	    or	eax, eax
 0000031C  75 02	   *	    jne    @C0031
 0000031E		   *@C0032:
 0000031E  EB 07				jmp L1
					.ENDIF
 00000320		   *@C0031:
 00000320  48				dec eax
 00000321  4A				dec edx
 00000322  E8 FFFFFF32			call GetValueAtCoords
 00000327				L1:
 00000327  C3				ret
 00000328			GetTopLeft ENDP

 00000328			GetTopCenter PROC
					.IF edx == 0
 00000328  0B D2	   *	    or	edx, edx
 0000032A  75 02	   *	    jne    @C0034
 0000032C  EB 08				jmp L1
					.ENDIF
 0000032E		   *@C0034:
 0000032E  4A				dec edx
 0000032F  78 05			js L1
 00000331  E8 FFFFFF23			call GetValueAtCoords
 00000336				L1:
 00000336  C3				ret
 00000337			GetTopCenter ENDP

 00000337			GetTopRight PROC
					.IF edx == 0 || eax == 19
 00000337  0B D2	   *	    or	edx, edx
 00000339  74 05	   *	    je	@C0037
 0000033B  83 F8 13	   *	    cmp    eax, 013h
 0000033E  75 02	   *	    jne    @C0036
 00000340		   *@C0037:
 00000340  EB 09				jmp L1
					.ENDIF
 00000342		   *@C0036:
 00000342  40				inc eax
 00000343  4A				dec edx
 00000344  78 05			js L1
 00000346  E8 FFFFFF0E			call GetValueAtCoords
 0000034B				L1:
 0000034B  C3				ret
 0000034C			GetTopRight ENDP

				;-----------------------------------------------------
				; main
				;
				; manages timing and procedure calls 
				;-----------------------------------------------------

 0000034C			.code
 0000034C			main PROC
					; randomize seed and generate a starting board
 0000034C  E8 00000000 E		call Randomize
 00000351  E8 FFFFFDF8			call GenRandomBoard

 00000356  B9 000003E8			mov ecx, 1000	; game will run for 1000 generations
 0000035B				L1:
 0000035B  E8 FFFFFCA0				call CalculateGeneration
 00000360  E8 FFFFFE4D				call DrawGameBoard
 00000365  E8 FFFFFEC0				call IncrementGeneration

 0000036A  B8 00000064				mov eax, 100	; 200 ms delay between generations
 0000036F  E8 00000000 E			call Delay		
 00000374  E2 E5			loop L1

					invoke ExitProcess,0
 00000376  6A 00	   *	    push   +000000000h
 00000378  E8 00000000 E   *	    call   ExitProcess
 0000037D			main endp
				end main

Microsoft (R) Macro Assembler Version 14.16.27026.1	    04/27/19 00:04:01
Source.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000001E9 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000037D Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CalcLivingNeighbors  . . . . . .	P Near	 00000047 _TEXT	Length= 00000107 Public STDCALL
CalculateGeneration  . . . . . .	P Near	 00000000 _TEXT	Length= 00000047 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000006 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000011 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawGameBoard  . . . . . . . . .	P Near	 000001B2 _TEXT	Length= 00000078 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000001C2 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000001CD _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GenRandomBoard . . . . . . . . .	P Near	 0000014E _TEXT	Length= 00000064 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000153 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 0000015E _TEXT	
GetBottomCenter  . . . . . . . .	P Near	 000002D9 _TEXT	Length= 0000000E Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000002E6 _TEXT	
GetBottomLeft  . . . . . . . . .	P Near	 000002C6 _TEXT	Length= 00000013 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000002D8 _TEXT	
GetBottomRight . . . . . . . . .	P Near	 000002E7 _TEXT	Length= 00000014 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000002FA _TEXT	
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLeft  . . . . . . . . . . . .	P Near	 000002FB _TEXT	Length= 0000000D Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000307 _TEXT	
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetRight . . . . . . . . . . . .	P Near	 00000308 _TEXT	Length= 0000000E Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000315 _TEXT	
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTopCenter . . . . . . . . . .	P Near	 00000328 _TEXT	Length= 0000000F Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000336 _TEXT	
GetTopLeft . . . . . . . . . . .	P Near	 00000316 _TEXT	Length= 00000012 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000327 _TEXT	
GetTopRight  . . . . . . . . . .	P Near	 00000337 _TEXT	Length= 00000015 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000034B _TEXT	
GetValueAtCoords . . . . . . . .	P Near	 00000259 _TEXT	Length= 0000002D Public STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IncrementGeneration  . . . . . .	P Near	 0000022A _TEXT	Length= 0000002F Public STDCALL
InvertValueAtCoords  . . . . . .	P Near	 00000286 _TEXT	Length= 00000040 Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 0000034C _TEXT	Length= 00000031 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000035B _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GameBoard  . . . . . . . . . . .	Byte	 0000000F _DATA	
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
Rowsize  . . . . . . . . . . . .	Number	 00000014h   
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cellState  . . . . . . . . . . .	Byte	 0000019F _DATA	
count3 . . . . . . . . . . . . .	DWord	 000001C4 _DATA	
count4 . . . . . . . . . . . . .	DWord	 000001A8 _DATA	
count  . . . . . . . . . . . . .	DWord	 000001D4 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
genCount . . . . . . . . . . . .	Word	 0000000D _DATA	
genMsg . . . . . . . . . . . . .	Byte	 00000000 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
liveCount2 . . . . . . . . . . .	DWord	 000001AC _DATA	
liveCount  . . . . . . . . . . .	DWord	 000001B0 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
originalX  . . . . . . . . . . .	DWord	 000001B4 _DATA	
originalY  . . . . . . . . . . .	DWord	 000001B8 _DATA	
randVal  . . . . . . . . . . . .	DWord	 000001C8 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
temp . . . . . . . . . . . . . .	Byte	 000001D8 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xCoord3  . . . . . . . . . . . .	DWord	 000001C0 _DATA	
xCoord4  . . . . . . . . . . . .	DWord	 000001A4 _DATA	
xCoord . . . . . . . . . . . . .	DWord	 000001D0 _DATA	
xIndex2  . . . . . . . . . . . .	DWord	 000001E5 _DATA	
xIndex . . . . . . . . . . . . .	DWord	 000001DD _DATA	
yCoord3  . . . . . . . . . . . .	DWord	 000001BC _DATA	
yCoord4  . . . . . . . . . . . .	DWord	 000001A0 _DATA	
yCoord . . . . . . . . . . . . .	DWord	 000001CC _DATA	
yIndex2  . . . . . . . . . . . .	DWord	 000001E1 _DATA	
yIndex . . . . . . . . . . . . .	DWord	 000001D9 _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
