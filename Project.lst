Microsoft (R) Macro Assembler Version 14.16.27026.1	    05/03/19 01:02:38
Source.asm						     Page 1 - 1


				; Conway's Game of Life
				; by frank paschen :)

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				.386
				.model flat,stdcall
Source.asm(6) : warning A4011:multiple .MODEL directives found : .MODEL ignored
				.stack 4096
				ExitProcess proto,dwExitCode:dword

 00000000			.data
 00000000 47 45 4E 45 52		genMsg BYTE "GENERATION #", 0
	   41 54 49 4F 4E
	   20 23 00
 0000000D 0000				genCount SWORD 0

					; Main game board array that will be drawn to the console
 0000000F  00000014 [			GameBoard BYTE 20 DUP(0)
	    00
	   ]
 00000023 = 00000014			Rowsize = ($ - GameBoard)
 00000023  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000037  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 0000004B  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 0000005F  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000073  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000087  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 0000009B  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 000000AF  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 000000C3  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 000000D7  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 000000EB  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 000000FF  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000113  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000127  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 0000013B  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 0000014F  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000163  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000177  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 0000018B  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
					; board modified each generation, and copied into the game GameBoard
 0000019F  00000014 [			GameBoardBackup BYTE 20 DUP(0)
	    00
	   ]
 000001B3 = 00000014			Rowsize2 = ($ - GameBoardBackup)
 000001B3  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 000001C7  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 000001DB  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 000001EF  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000203  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000217  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 0000022B  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 0000023F  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000253  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000267  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 0000027B  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 0000028F  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 000002A3  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 000002B7  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 000002CB  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 000002DF  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 000002F3  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000307  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 0000031B  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
				;-----------------------------------------------------
				; CalculateGeneration
				;
				; Calculates next game board based on game's rules
				; Called each gamestep
				; Receives: N/A
				;
				; Returns: N/A
				;-----------------------------------------------------
 0000032F 00			cellState BYTE 0	; 1 or 0, living or dead
 00000330 00000000		yCoord4 DWORD 0
 00000334 00000000		xCoord4 DWORD 0
 00000338 00000000		count4 DWORD 0
 0000033C 00			liveCount2 BYTE 0
 00000000			.code
 00000000			CalculateGeneration PROC USES ecx 
 00000000  51		   *	    push   ecx
 00000001  E8 000000C4			call CopyMainToBackup

 00000006  B9 00000014			mov ecx, 20
 0000000B				L1:
 0000000B  89 0D 00000338 R			mov count4, ecx
 00000011  B9 00000014				mov ecx, 20
 00000016					L2:
							; get live neighbor count
 00000016  A1 00000334 R				mov eax, xCoord4
 0000001B  8B 15 00000330 R				mov edx, yCoord4
 00000021  E8 000001A6					call CalcLivingNeighbors
 00000026  88 1D 0000033C R				mov liveCount2, bl

							; get cellstate
 0000002C  A1 00000334 R				mov eax, xCoord4
 00000031  8B 15 00000330 R				mov edx, yCoord4
 00000037  E8 000003A1					call GetValueAtCoords
 0000003C  A2 0000032F R				mov cellState, al
 00000041  FF 05 00000334 R				inc xCoord4

							
							; apply GoL rules & change backup board
							.IF (cellstate == 0) && (liveCount2 == 3)
 00000047  80 3D 0000032F R
	   00		   *	    cmp    cellState, 000h
 0000004E  75 10	   *	    jne    @C0001
 00000050  80 3D 0000033C R
	   03		   *	    cmp    liveCount2, 003h
 00000057  75 07	   *	    jne    @C0001
 00000059  E8 00000419						call InvertValueAtCoords2
							.ELSEIF (cellState == 1) && (liveCount2 <= 1)
 0000005E  EB 4D	   *	    jmp    @C0004
 00000060		   *@C0001:
 00000060  80 3D 0000032F R
	   01		   *	    cmp    cellState, 001h
 00000067  75 10	   *	    jne    @C0005
 00000069  80 3D 0000033C R
	   01		   *	    cmp    liveCount2, 001h
 00000070  77 07	   *	    ja	@C0005
 00000072  E8 00000400						call InvertValueAtCoords2
							.ELSEIF (cellState == 1) && (liveCount2 >= 4)
 00000077  EB 34	   *	    jmp    @C0008
 00000079		   *@C0005:
 00000079  80 3D 0000032F R
	   01		   *	    cmp    cellState, 001h
 00000080  75 10	   *	    jne    @C0009
 00000082  80 3D 0000033C R
	   04		   *	    cmp    liveCount2, 004h
 00000089  72 07	   *	    jb	@C0009
 0000008B  E8 000003E7						call InvertValueAtCoords2
							.ELSEIF (cellState == 1) && (liveCount2 == 2 || liveCount2 == 3)
 00000090  EB 1B	   *	    jmp    @C000C
 00000092		   *@C0009:
 00000092  80 3D 0000032F R
	   01		   *	    cmp    cellState, 001h
 00000099  75 12	   *	    jne    @C000D
 0000009B  80 3D 0000033C R
	   02		   *	    cmp    liveCount2, 002h
 000000A2  74 09	   *	    je	@C000E
 000000A4  80 3D 0000033C R
	   03		   *	    cmp    liveCount2, 003h
 000000AB  75 00	   *	    jne    @C000D
 000000AD		   *@C000E:
								
							.ENDIF
 000000AD		   *@C000D:
 000000AD		   *@C000C:
 000000AD		   *@C0008:
 000000AD		   *@C0004:

 000000AD  66| 49				dec cx
 000000AF  0F 85 FFFFFF61			jne L2
 000000B5  8B 0D 00000338 R				mov ecx, count4
 000000BB  66| 49			dec cx
 000000BD  0F 85 FFFFFF48		jne L1

 000000C3  E8 00000052			call CopyBackupToMain
					ret
 000000C8  59		   *	    pop    ecx
 000000C9  C3		   *	    ret    00000h
 000000CA			CalculateGeneration ENDP
				;-----------------------------------------------------
				; CopyMainToBackup
				;
				; Copies every cell from the main GameBoard to the GameBoardBackup
				; Receives: N/A
				;
				; Returns: N/A
				;-----------------------------------------------------
 0000033D			.data
 0000033D 00000000			yCoord6 DWORD 0
 00000341 00000000			xCoord6 DWORD 0
 00000345 00000000			count6 DWORD 0
 00000349 00000000			backupVal2 DWORD 0
 000000CA			.code
 000000CA			CopyMainToBackup PROC
 000000CA  B9 00000014			mov ecx, 20

 000000CF				L1:
 000000CF  89 0D 00000345 R			mov count6, ecx
 000000D5  B9 00000014				mov ecx, 20
 000000DA					L2:
							
							; xy in backup
 000000DA  A1 00000341 R				mov eax, xCoord6
 000000DF  8B 15 0000033D R				mov edx, yCoord6

 000000E5  E8 000002F3					call GetValueAtCoords	; value in backup
 000000EA  A3 00000349 R				mov backupVal2, eax

 000000EF  8B 15 0000034D R				mov edx, yCoord7
 000000F5  A1 00000351 R				mov eax, xCoord7
 000000FA  8B 1D 00000349 R				mov ebx, backupVal2
 00000100  E8 00000096					call SetBackupCell

 00000105  FF 05 00000341 R				inc xCoord6
 0000010B  66| 49				dec cx
 0000010D  75 CB				jne L2
 0000010F  8B 0D 00000345 R				mov ecx, count6
 00000115  66| 49			dec cx
 00000117  75 B6			jne L1
 00000119  C3				ret
 0000011A			CopyMainToBackup ENDP
				;-----------------------------------------------------
				; CopyBackupToMain
				;
				; Copies every cell from the GameBoardBackup to the main GameBoard
				; Receives: N/A
				;
				; Returns: N/A
				;-----------------------------------------------------
 0000034D			.data
 0000034D 00000000			yCoord7 DWORD 0
 00000351 00000000			xCoord7 DWORD 0
 00000355 00000000			count7 DWORD 0
 00000359 00				backupVal BYTE 0
 0000011A			.code
 0000011A			CopyBackupToMain PROC
 0000011A  B9 00000014			mov ecx, 20

 0000011F				L1:
 0000011F  89 0D 00000355 R			mov count7, ecx
 00000125  B9 00000014				mov ecx, 20
 0000012A					L2:
							
							; xy in backup
 0000012A  A1 00000351 R				mov eax, xCoord7
 0000012F  8B 15 0000034D R				mov edx, yCoord7

 00000135  E8 000002D0					call GetValueAtCoords2	; value in backup
 0000013A  A2 00000359 R				mov backupVal, al

 0000013F  8B 15 0000034D R				mov edx, yCoord7
 00000145  A1 00000351 R				mov eax, xCoord7
 0000014A  8A 1D 00000359 R				mov bl, backupVal
 00000150  E8 00000015					call SetMainCell

 00000155  FF 05 00000351 R				inc xCoord7
 0000015B  66| 49				dec cx
 0000015D  75 CB				jne L2
 0000015F  8B 0D 00000355 R				mov ecx, count7
 00000165  66| 49			dec cx
 00000167  75 B6			jne L1
 00000169  C3				ret
 0000016A			CopyBackupToMain ENDP

				;-----------------------------------------------------
				; SetMainCell
				;
				; Returns number of "living" neighbors for any given cell. Between 0 and 8
				; Receives: edx = y coordinate
				;			eax = x coordinate
				;			bl = value
				;
				; Returns: ebx = # of living neighbors
				;-----------------------------------------------------
 0000035A			.data
 0000035A 00			newValue BYTE ?
 0000035B 00000000		yIndex3 DWORD ?
 0000035F 00000000		xIndex3 DWORD ?
 0000016A			.code
 0000016A			SetMainCell PROC 
 0000016A  88 1D 0000035A R		mov newValue, bl
 00000170  A3 0000035F R		mov xIndex3, eax
 00000175  89 15 0000035B R		mov yIndex3, edx

 0000017B  BB 0000000F R		mov ebx, OFFSET GameBoard 
 00000180  B8 00000014			mov eax, RowSize
 00000185  F7 25 0000035B R		mul yIndex3
 0000018B  03 D8			add ebx, eax 
 0000018D  8B 35 0000035F R		mov esi, xIndex3
 00000193  A0 0000035A R		mov al, newValue
 00000198  88 04 33			mov [ebx + esi], al

 0000019B			SetMainCell ENDP

 00000363			.data
 00000363 00000000		newValue2 DWORD ?
 00000367 00000000		yIndex4 DWORD ?
 0000036B 00000000		xIndex4 DWORD ?
 0000019B			.code
 0000019B			SetBackupCell PROC 
 0000019B  89 1D 00000363 R		mov newValue2, ebx
 000001A1  A3 0000036B R		mov xIndex4, eax
 000001A6  89 15 00000367 R		mov yIndex4, edx

 000001AC  BB 0000019F R		mov ebx, OFFSET GameBoardBackup
 000001B1  B8 00000014			mov eax, RowSize2
 000001B6  F7 25 00000367 R		mul yIndex4	
 000001BC  03 D8			add ebx, eax
 000001BE  8B 35 0000036B R		mov esi, xIndex4
 000001C4  B8 00000000			mov eax, 0 ; problem here
 000001C9  89 04 33			mov [ebx + esi], eax

 000001CC			SetBackupCell ENDP

				;-----------------------------------------------------
				; CalcLivingNeighbors
				;
				; Returns number of "living" neighbors for any given cell. Between 0 and 8
				; Receives: edx = y coordinate
				;			eax = x coordinate
				; 
				; Returns: ebx = # of living neighbors
				;-----------------------------------------------------
 0000036F			.data
 0000036F 00000000		liveCount DWORD 0	; stores # of living neighbors for each cell
 00000373 00000000		originalX DWORD 0
 00000377 00000000		originalY DWORD 0
 000001CC			.code
 000001CC			CalcLivingNeighbors PROC 

 000001CC  A3 00000373 R		mov originalX, eax
 000001D1  89 15 00000377 R		mov originalY, edx
 000001D7  C7 05 0000036F R		mov liveCount, 0
	   00000000
					; check all 8 adjacent cells and add any living (1) cells to the total

 000001E1  A1 00000373 R		mov eax, originalX
 000001E6  8B 15 00000377 R		mov edx, originalY
 000001EC  E8 000002C6			call GetBottomLeft
					.IF (al == 0) || (al == 1)
 000001F1  0A C0	   *	    or	al, al
 000001F3  74 04	   *	    je	@C0012
 000001F5  3C 01	   *	    cmp    al, 001h
 000001F7  75 06	   *	    jne    @C0011
 000001F9		   *@C0012:
 000001F9  01 05 0000036F R			add liveCount, eax
					.ENDIF
 000001FF		   *@C0011:

 000001FF  A1 00000373 R		mov eax, originalX
 00000204  8B 15 00000377 R		mov edx, originalY
 0000020A  E8 000002BB			call GetBottomCenter
					.IF (al == 0) || (al == 1)
 0000020F  0A C0	   *	    or	al, al
 00000211  74 04	   *	    je	@C0015
 00000213  3C 01	   *	    cmp    al, 001h
 00000215  75 06	   *	    jne    @C0014
 00000217		   *@C0015:
 00000217  01 05 0000036F R			add liveCount, eax
					.ENDIF
 0000021D		   *@C0014:

 0000021D  A1 00000373 R		mov eax, originalX
 00000222  8B 15 00000377 R		mov edx, originalY
 00000228  E8 000002AB			call GetBottomRight
					.IF (al == 0) || (al == 1)
 0000022D  0A C0	   *	    or	al, al
 0000022F  74 04	   *	    je	@C0018
 00000231  3C 01	   *	    cmp    al, 001h
 00000233  75 06	   *	    jne    @C0017
 00000235		   *@C0018:
 00000235  01 05 0000036F R			add liveCount, eax
					.ENDIF
 0000023B		   *@C0017:

 0000023B  A1 00000373 R		mov eax, originalX
 00000240  8B 15 00000377 R		mov edx, originalY
 00000246  E8 000002AE			call GetRight
					.IF (al == 0) || (al == 1)
 0000024B  0A C0	   *	    or	al, al
 0000024D  74 04	   *	    je	@C001B
 0000024F  3C 01	   *	    cmp    al, 001h
 00000251  75 06	   *	    jne    @C001A
 00000253		   *@C001B:
 00000253  01 05 0000036F R			add liveCount, eax
					.ENDIF
 00000259		   *@C001A:

 00000259  A1 00000373 R		mov eax, originalX
 0000025E  8B 15 00000377 R		mov edx, originalY
 00000264  E8 00000283			call GetLeft
					.IF (al == 0) || (al == 1)
 00000269  0A C0	   *	    or	al, al
 0000026B  74 04	   *	    je	@C001E
 0000026D  3C 01	   *	    cmp    al, 001h
 0000026F  75 06	   *	    jne    @C001D
 00000271		   *@C001E:
 00000271  01 05 0000036F R			add liveCount, eax
					.ENDIF
 00000277		   *@C001D:

 00000277  A1 00000373 R		mov eax, originalX
 0000027C  8B 15 00000377 R		mov edx, originalY
 00000282  E8 00000280			call GetTopLeft
					.IF (al == 0) || (al == 1)
 00000287  0A C0	   *	    or	al, al
 00000289  74 04	   *	    je	@C0021
 0000028B  3C 01	   *	    cmp    al, 001h
 0000028D  75 06	   *	    jne    @C0020
 0000028F		   *@C0021:
 0000028F  01 05 0000036F R			add liveCount, eax
					.ENDIF
 00000295		   *@C0020:

 00000295  A1 00000373 R		mov eax, originalX
 0000029A  8B 15 00000377 R		mov edx, originalY
 000002A0  E8 00000274			call GetTopCenter
					.IF (al == 0) || (al == 1)
 000002A5  0A C0	   *	    or	al, al
 000002A7  74 04	   *	    je	@C0024
 000002A9  3C 01	   *	    cmp    al, 001h
 000002AB  75 06	   *	    jne    @C0023
 000002AD		   *@C0024:
 000002AD  01 05 0000036F R			add liveCount, eax
					.ENDIF
 000002B3		   *@C0023:

 000002B3  A1 00000373 R		mov eax, originalX
 000002B8  8B 15 00000377 R		mov edx, originalY
 000002BE  E8 00000263			call GetTopRight
					.IF (al == 0) || (al == 1)
 000002C3  0A C0	   *	    or	al, al
 000002C5  74 04	   *	    je	@C0027
 000002C7  3C 01	   *	    cmp    al, 001h
 000002C9  75 06	   *	    jne    @C0026
 000002CB		   *@C0027:
 000002CB  01 05 0000036F R			add liveCount, eax
					.ENDIF
 000002D1		   *@C0026:

					; return count in ebx for CalculateGeneration
 000002D1  8B 1D 0000036F R		mov ebx, liveCount

 000002D7  C3				ret
 000002D8			CalcLivingNeighbors ENDP

				;-----------------------------------------------------
				; GenRandomBoard
				;
				; Sets random cells in the gameboard to living or dead.
				; Called before first generation
				; Receives: N/A
				;
				; Returns: N/A
				;-----------------------------------------------------
 0000037B			.data
 0000037B 00000000			yCoord3 DWORD 0
 0000037F 00000000			xCoord3 DWORD 0
 00000383 00000000			count3 DWORD 0
 00000387 00000000			randVal DWORD 0
 000002D8			.code
 000002D8			GenRandomBoard PROC
 000002D8  B9 00000014			mov ecx, 20

 000002DD				L1:	; outer loop
 000002DD  89 0D 00000383 R			mov count3, ecx
 000002E3  B9 00000014				mov ecx, 20
 000002E8					L2: ; inner loop

 000002E8  8B 15 0000037B R				mov edx, yCoord3	; y
 000002EE  A1 0000037F R				mov eax, xCoord3 ; x

							; preserve eax to use RandomRange
 000002F3  50						push eax
 000002F4  B8 00000002					mov eax, 2

 000002F9  E8 00000000 E				call RandomRange
 000002FE  A3 00000387 R				mov randVal, eax
 00000303  58						pop eax

							.IF randVal > 0
 00000304  83 3D 00000387 R
	   00		   *	    cmp    randVal, 000h
 0000030B  76 05	   *	    jbe    @C0029
 0000030D  E8 00000125						call InvertValueAtCoords
							.ENDIF
 00000312		   *@C0029:

 00000312  E8 000000C6					call GetValueAtCoords

 00000317  FF 05 0000037F R				inc xCoord3
 0000031D  E2 C9				loop L2
 0000031F  8B 0D 00000383 R				mov ecx, count3
 00000325  E2 B6			loop L1
					
 00000327  C7 05 0000037B R		mov yCoord3, 0
	   00000000
 00000331  C7 05 0000037F R		mov xCoord3, 0
	   00000000

 0000033B  C3				ret
 0000033C			GenRandomBoard ENDP
				;-----------------------------------------------------
				; DrawGameBoard
				;
				; Uses cursor to print the gameboard to the console.
				; Called immediately after CalculateGeneration
				; Receives: N/A
				;
				; Returns: N/A
				;-----------------------------------------------------
 0000038B			.data
 0000038B 00000000			yCoord DWORD 0
 0000038F 00000000			xCoord DWORD 0
 00000393 00000000			count DWORD 0
 00000397 00				temp BYTE ?
 0000033C			.code
 0000033C			DrawGameBoard PROC USES ecx
 0000033C  51		   *	    push   ecx
 0000033D  E8 00000000 E		call Clrscr
 00000342  E8 00000000 E		call Crlf
 00000347  B9 00000014			mov ecx, 20
 0000034C  C7 05 0000038B R		mov yCoord, 0
	   00000000
 00000356  C7 05 0000038F R		mov xCoord, 0
	   00000000

 00000360				L1:	; outer loop
 00000360  89 0D 00000393 R			mov count, ecx
 00000366  B9 00000014				mov ecx, 20
 0000036B					L2: ; inner loop
 0000036B  A1 0000038F R				mov eax, xCoord	; x

 00000370  E8 00000068					call GetValueAtCoords
							
							; TODO: Color these, possible find better ASCII characters
 00000375  A2 00000397 R				mov temp, al
							.IF temp == 0	; 0 = dead cell
 0000037A  80 3D 00000397 R
	   00		   *	    cmp    temp, 000h
 00000381  75 04	   *	    jne    @C002B
 00000383  B0 B2						mov al, 178
							.ELSEIF temp == 1	; 1 = living cell
 00000385  EB 0B	   *	    jmp    @C002D
 00000387		   *@C002B:
 00000387  80 3D 00000397 R
	   01		   *	    cmp    temp, 001h
 0000038E  75 02	   *	    jne    @C002E
 00000390  B0 B0						mov al, 176
							.ENDIF
 00000392		   *@C002E:
 00000392		   *@C002D:

 00000392  E8 00000000 E				call WriteChar

 00000397  FF 05 0000038F R				inc xCoord
 0000039D  E2 CC				loop L2
 0000039F  8B 0D 00000393 R				mov ecx, count
 000003A5  E8 00000000 E				call Crlf
 000003AA  E2 B4			loop L1

					ret
 000003AC  59		   *	    pop    ecx
 000003AD  C3		   *	    ret    00000h
 000003AE			DrawGameBoard ENDP
				;-----------------------------------------------------
				; IncrementGeneration
				;
				; Prints and increments the generation count.
				; Called immediately after CalculateGeneration
				; Receives: N/A
				;
				; Returns: N/A
				;-----------------------------------------------------
 000003AE			IncrementGeneration PROC USES eax edx
 000003AE  50		   *	    push   eax
 000003AF  52		   *	    push   edx
 000003B0  B8 00000000			mov eax, 0
					; increment gen count
 000003B5  66| FF 05			inc genCount
	   0000000D R
					; move cursor to top left
 000003BC  B6 00			mov dh, 0	; Y
 000003BE  B2 00			mov dl, 0	; X
 000003C0  E8 00000000 E		call Gotoxy
					; print Generation #:
 000003C5  BA 00000000 R		mov edx, OFFSET genMsg
 000003CA  E8 00000000 E		call WriteString      
					; print actual gen count
 000003CF  66| A1			mov ax, genCount
	   0000000D R

 000003D5  E8 00000000 E		call WriteDec
					ret
 000003DA  5A		   *	    pop    edx
 000003DB  58		   *	    pop    eax
 000003DC  C3		   *	    ret    00000h
 000003DD			IncrementGeneration ENDP
				;-----------------------------------------------------
				; GetValueAtCoords
				;
				; Returns value found at index in gameboard.
				; Receives: edx = y coordinate
				;			eax = x coordinate
				; 
				; Returns: al = value at coordinates in array (zero indexed)
				;-----------------------------------------------------
 00000398			.data
 00000398 00000000			yIndex DWORD ?
 0000039C 00000000			xIndex DWORD ?
 000003DD			.code
 000003DD			GetValueAtCoords PROC USES esi ebx
 000003DD  56		   *	    push   esi
 000003DE  53		   *	    push   ebx
 000003DF  89 15 00000398 R		mov yIndex, edx
 000003E5  A3 0000039C R		mov xIndex, eax

					; store array offset in memory
 000003EA  BB 0000000F R		mov ebx, OFFSET GameBoard ; table offset
					; multiply RowSize and y coordinate
 000003EF  B8 00000014			mov eax, RowSize
 000003F4  F7 25 00000398 R		mul yIndex	; result of AL * DH stored in EAX
 000003FA  03 D8			add ebx, eax ; row offset
					; add offset and x coordinate to get [X,Y] in array
 000003FC  8B 35 0000039C R		mov esi, xIndex
 00000402  B4 00			mov ah, 0	; clear top half of reg NOTE: ONLY NECESSARY FOR WRITEINT PROC. We can just test al for other purposes
 00000404  8A 04 33			mov al, [ebx + esi] ; al = result

					ret
 00000407  5B		   *	    pop    ebx
 00000408  5E		   *	    pop    esi
 00000409  C3		   *	    ret    00000h
 0000040A			GetValueAtCoords ENDP
				;-----------------------------------------------------
				; GetValueAtCoords2
				;
				; Returns value found at index in GameBoardBackup.
				; Receives: edx = y coordinate
				;			eax = x coordinate
				; 
				; Returns: al = value at coordinates in array (zero indexed)
				;-----------------------------------------------------
 0000040A			GetValueAtCoords2 PROC USES esi ebx
 0000040A  56		   *	    push   esi
 0000040B  53		   *	    push   ebx
 0000040C  89 15 00000398 R		mov yIndex, edx
 00000412  A3 0000039C R		mov xIndex, eax

 00000417  BB 0000019F R		mov ebx, OFFSET GameBoardBackup

 0000041C  B8 00000014			mov eax, RowSize2
 00000421  F7 25 00000398 R		mul yIndex	
 00000427  03 D8			add ebx, eax 

 00000429  8B 35 0000039C R		mov esi, xIndex
 0000042F  B4 00			mov ah, 0
 00000431  8A 04 33			mov al, [ebx + esi]

					ret
 00000434  5B		   *	    pop    ebx
 00000435  5E		   *	    pop    esi
 00000436  C3		   *	    ret    00000h
 00000437			GetValueAtCoords2 ENDP

				;-----------------------------------------------------
				; GetValueAtCoords
				;
				; Inverts value found at index in gameboard.
				; Receives: edx = y coordinate
				;			eax = x coordinate
				; 
				; Returns: N/A
				;-----------------------------------------------------
 000003A0			.data
 000003A0 00000000			yIndex2 DWORD ?
 000003A4 00000000			xIndex2 DWORD ?
 00000437			.code
 00000437			InvertValueAtCoords PROC USES edx eax ebx
 00000437  52		   *	    push   edx
 00000438  50		   *	    push   eax
 00000439  53		   *	    push   ebx
 0000043A  89 15 000003A0 R		mov yIndex2, edx
 00000440  A3 000003A4 R		mov xIndex2, eax

					; same exact thing as GetValueAtCoords
 00000445  BB 0000000F R		mov ebx, OFFSET GameBoard
 0000044A  B8 00000014			mov eax, RowSize
 0000044F  F7 25 000003A0 R		mul yIndex2
 00000455  03 D8			add ebx, eax
 00000457  8B 35 000003A4 R		mov esi, xIndex2
 0000045D  B4 00			mov ah, 0
 0000045F  8A 04 33			mov al, [ebx + esi]

					; invert last bit in AL
					; couldnt figure out a better way to do this
					.IF al == 0001h
 00000462  3C 01	   *	    cmp    al, 001h
 00000464  75 04	   *	    jne    @C0030
 00000466  B0 00				mov al, 0000
					.ELSEIF al == 0000h
 00000468  EB 06	   *	    jmp    @C0032
 0000046A		   *@C0030:
 0000046A  0A C0	   *	    or	al, al
 0000046C  75 02	   *	    jne    @C0033
 0000046E  B0 01				mov al, 0001h
					.ENDIF
 00000470		   *@C0033:
 00000470		   *@C0032:
					
					; move the new value to the array
 00000470  88 04 33			mov [ebx+esi], al
					ret
 00000473  5B		   *	    pop    ebx
 00000474  58		   *	    pop    eax
 00000475  5A		   *	    pop    edx
 00000476  C3		   *	    ret    00000h
 00000477			InvertValueAtCoords ENDP
 000003A8			.data
 000003A8 00000000			yIndex9 DWORD ?
 000003AC 00000000			xIndex9 DWORD ?
 00000477			.code
 00000477			InvertValueAtCoords2 PROC USES edx eax ebx
 00000477  52		   *	    push   edx
 00000478  50		   *	    push   eax
 00000479  53		   *	    push   ebx
 0000047A  89 15 000003A8 R		mov yIndex9, edx
 00000480  A3 000003AC R		mov xIndex9, eax

					; same exact thing as GetValueAtCoords
 00000485  BB 0000019F R		mov ebx, OFFSET GameBoardBackup
 0000048A  B8 00000014			mov eax, RowSize2
 0000048F  F7 25 000003A8 R		mul yIndex9
 00000495  03 D8			add ebx, eax
 00000497  8B 35 000003AC R		mov esi, xIndex9
 0000049D  B4 00			mov ah, 0
 0000049F  8A 04 33			mov al, [ebx + esi]

					.IF al == 0001h
 000004A2  3C 01	   *	    cmp    al, 001h
 000004A4  75 04	   *	    jne    @C0035
 000004A6  B0 00				mov al, 0000
					.ELSEIF al == 0000h
 000004A8  EB 06	   *	    jmp    @C0037
 000004AA		   *@C0035:
 000004AA  0A C0	   *	    or	al, al
 000004AC  75 02	   *	    jne    @C0038
 000004AE  B0 01				mov al, 0001h
					.ENDIF
 000004B0		   *@C0038:
 000004B0		   *@C0037:
					
					; move the new value to the array
 000004B0  88 04 33			mov [ebx+esi], al

					ret
 000004B3  5B		   *	    pop    ebx
 000004B4  58		   *	    pop    eax
 000004B5  5A		   *	    pop    edx
 000004B6  C3		   *	    ret    00000h
 000004B7			InvertValueAtCoords2 ENDP

				;-----------------------------------------------------
				; Helper procedures for calculating # of living cells
				; All procedures check if cell is on a border and behave accordingly
				; (do not want to return values outside of the array)
				; Receives: edx = y coordinate
				;			eax = x coordinate
				; 
				; Returns: al = value at coordinates in array (zero indexed)
				;-----------------------------------------------------
 000004B7			.code
 000004B7			GetBottomLeft PROC
					.IF eax == 0 || edx == 19
 000004B7  0B C0	   *	    or	eax, eax
 000004B9  74 05	   *	    je	@C003B
 000004BB  83 FA 13	   *	    cmp    edx, 013h
 000004BE  75 02	   *	    jne    @C003A
 000004C0		   *@C003B:
 000004C0  EB 07				jmp L1
					.ENDIF
 000004C2		   *@C003A:
 000004C2  48				dec eax
 000004C3  42				inc edx
 000004C4  E8 FFFFFF14			call GetValueAtCoords
 000004C9				L1:
 000004C9  C3				ret
 000004CA			GetBottomLeft ENDP

 000004CA			GetBottomCenter PROC
					.IF edx == 19
 000004CA  83 FA 13	   *	    cmp    edx, 013h
 000004CD  75 02	   *	    jne    @C003D
 000004CF  EB 06				jmp L1
					.ENDIF
 000004D1		   *@C003D:
 000004D1  42				inc edx
 000004D2  E8 FFFFFF06			call GetValueAtCoords
 000004D7				L1:
 000004D7  C3				ret
 000004D8			GetBottomCenter ENDP

 000004D8			GetBottomRight PROC
					.IF edx == 19 || eax == 19
 000004D8  83 FA 13	   *	    cmp    edx, 013h
 000004DB  74 05	   *	    je	@C0040
 000004DD  83 F8 13	   *	    cmp    eax, 013h
 000004E0  75 02	   *	    jne    @C003F
 000004E2		   *@C0040:
 000004E2  EB 07				jmp L1
					.ENDIF
 000004E4		   *@C003F:
 000004E4  40				inc eax
 000004E5  42				inc edx
 000004E6  E8 FFFFFEF2			call GetValueAtCoords
 000004EB				L1:
 000004EB  C3				ret
 000004EC			GetBottomRight ENDP

 000004EC			GetLeft PROC
					.IF eax == 0
 000004EC  0B C0	   *	    or	eax, eax
 000004EE  75 02	   *	    jne    @C0042
 000004F0  EB 06				jmp L1
					.ENDIF
 000004F2		   *@C0042:
 000004F2  48				dec eax

 000004F3  E8 FFFFFEE5			call GetValueAtCoords
 000004F8				L1:
 000004F8  C3				ret
 000004F9			GetLeft ENDP

 000004F9			GetRight PROC
					.IF eax == 19
 000004F9  83 F8 13	   *	    cmp    eax, 013h
 000004FC  75 02	   *	    jne    @C0044
 000004FE  EB 06				jmp L1
					.ENDIF
 00000500		   *@C0044:
 00000500  40				inc eax
 00000501  E8 FFFFFED7			call GetValueAtCoords
 00000506				L1:
 00000506  C3				ret
 00000507			GetRight ENDP

 00000507			GetTopLeft PROC
					.IF edx == 0 || eax == 0
 00000507  0B D2	   *	    or	edx, edx
 00000509  74 04	   *	    je	@C0047
 0000050B  0B C0	   *	    or	eax, eax
 0000050D  75 02	   *	    jne    @C0046
 0000050F		   *@C0047:
 0000050F  EB 07				jmp L1
					.ENDIF
 00000511		   *@C0046:
 00000511  48				dec eax
 00000512  4A				dec edx
 00000513  E8 FFFFFEC5			call GetValueAtCoords
 00000518				L1:
 00000518  C3				ret
 00000519			GetTopLeft ENDP

 00000519			GetTopCenter PROC
					.IF edx == 0
 00000519  0B D2	   *	    or	edx, edx
 0000051B  75 02	   *	    jne    @C0049
 0000051D  EB 06				jmp L1
					.ENDIF
 0000051F		   *@C0049:
 0000051F  4A				dec edx
 00000520  E8 FFFFFEB8			call GetValueAtCoords
 00000525				L1:
 00000525  C3				ret
 00000526			GetTopCenter ENDP

 00000526			GetTopRight PROC
					.IF edx == 0 || eax == 19
 00000526  0B D2	   *	    or	edx, edx
 00000528  74 05	   *	    je	@C004C
 0000052A  83 F8 13	   *	    cmp    eax, 013h
 0000052D  75 02	   *	    jne    @C004B
 0000052F		   *@C004C:
 0000052F  EB 07				jmp L1
					.ENDIF
 00000531		   *@C004B:
 00000531  40				inc eax
 00000532  4A				dec edx
 00000533  E8 FFFFFEA5			call GetValueAtCoords
 00000538				L1:
 00000538  C3				ret
 00000539			GetTopRight ENDP

				;-----------------------------------------------------
				; main
				;
				; Contains game loop which manages timing and procedure calls 
				;-----------------------------------------------------

 000003B0			.data
 000003B0 00000000		y DWORD 0
 000003B4 00000000		x DWORD 0
 00000539			.code
 00000539			main PROC
					; randomize seed and generate a starting board
 00000539  E8 00000000 E		call Randomize
 0000053E  E8 FFFFFD95			call GenRandomBoard

 00000543  B9 000003E8			mov ecx, 1000	; game will run for 1000 generations
 00000548				L1:
						
 00000548  E8 FFFFFDEF				call DrawGameBoard
 0000054D  E8 FFFFFE5C				call IncrementGeneration

						;call CalculateGeneration

 00000552  B8 000000C8				mov eax, 200	; 200 ms delay between generations
 00000557  E8 00000000 E			call Delay		
 0000055C  E2 EA			loop L1

					invoke ExitProcess,0
 0000055E  6A 00	   *	    push   +000000000h
 00000560  E8 00000000 E   *	    call   ExitProcess
 00000565			main endp
				end main

Microsoft (R) Macro Assembler Version 14.16.27026.1	    05/03/19 01:02:38
Source.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000003B8 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000565 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CalcLivingNeighbors  . . . . . .	P Near	 000001CC _TEXT	Length= 0000010C Public STDCALL
CalculateGeneration  . . . . . .	P Near	 00000000 _TEXT	Length= 000000CA Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000000B _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000016 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CopyBackupToMain . . . . . . . .	P Near	 0000011A _TEXT	Length= 00000050 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000011F _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 0000012A _TEXT	
CopyMainToBackup . . . . . . . .	P Near	 000000CA _TEXT	Length= 00000050 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000000CF _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000000DA _TEXT	
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawGameBoard  . . . . . . . . .	P Near	 0000033C _TEXT	Length= 00000072 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000360 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 0000036B _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GenRandomBoard . . . . . . . . .	P Near	 000002D8 _TEXT	Length= 00000064 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000002DD _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000002E8 _TEXT	
GetBottomCenter  . . . . . . . .	P Near	 000004CA _TEXT	Length= 0000000E Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000004D7 _TEXT	
GetBottomLeft  . . . . . . . . .	P Near	 000004B7 _TEXT	Length= 00000013 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000004C9 _TEXT	
GetBottomRight . . . . . . . . .	P Near	 000004D8 _TEXT	Length= 00000014 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000004EB _TEXT	
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLeft  . . . . . . . . . . . .	P Near	 000004EC _TEXT	Length= 0000000D Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000004F8 _TEXT	
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetRight . . . . . . . . . . . .	P Near	 000004F9 _TEXT	Length= 0000000E Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000506 _TEXT	
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTopCenter . . . . . . . . . .	P Near	 00000519 _TEXT	Length= 0000000D Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000525 _TEXT	
GetTopLeft . . . . . . . . . . .	P Near	 00000507 _TEXT	Length= 00000012 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000518 _TEXT	
GetTopRight  . . . . . . . . . .	P Near	 00000526 _TEXT	Length= 00000013 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000538 _TEXT	
GetValueAtCoords2  . . . . . . .	P Near	 0000040A _TEXT	Length= 0000002D Public STDCALL
GetValueAtCoords . . . . . . . .	P Near	 000003DD _TEXT	Length= 0000002D Public STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IncrementGeneration  . . . . . .	P Near	 000003AE _TEXT	Length= 0000002F Public STDCALL
InvertValueAtCoords2 . . . . . .	P Near	 00000477 _TEXT	Length= 00000040 Public STDCALL
InvertValueAtCoords  . . . . . .	P Near	 00000437 _TEXT	Length= 00000040 Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetBackupCell  . . . . . . . . .	P Near	 0000019B _TEXT	Length= 00000031 Public STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetMainCell  . . . . . . . . . .	P Near	 0000016A _TEXT	Length= 00000031 Public STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000539 _TEXT	Length= 0000002C Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000548 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GameBoardBackup  . . . . . . . .	Byte	 0000019F _DATA	
GameBoard  . . . . . . . . . . .	Byte	 0000000F _DATA	
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
Rowsize2 . . . . . . . . . . . .	Number	 00000014h   
Rowsize  . . . . . . . . . . . .	Number	 00000014h   
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
backupVal2 . . . . . . . . . . .	DWord	 00000349 _DATA	
backupVal  . . . . . . . . . . .	Byte	 00000359 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cellState  . . . . . . . . . . .	Byte	 0000032F _DATA	
count3 . . . . . . . . . . . . .	DWord	 00000383 _DATA	
count4 . . . . . . . . . . . . .	DWord	 00000338 _DATA	
count6 . . . . . . . . . . . . .	DWord	 00000345 _DATA	
count7 . . . . . . . . . . . . .	DWord	 00000355 _DATA	
count  . . . . . . . . . . . . .	DWord	 00000393 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
genCount . . . . . . . . . . . .	Word	 0000000D _DATA	
genMsg . . . . . . . . . . . . .	Byte	 00000000 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
liveCount2 . . . . . . . . . . .	Byte	 0000033C _DATA	
liveCount  . . . . . . . . . . .	DWord	 0000036F _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
newValue2  . . . . . . . . . . .	DWord	 00000363 _DATA	
newValue . . . . . . . . . . . .	Byte	 0000035A _DATA	
originalX  . . . . . . . . . . .	DWord	 00000373 _DATA	
originalY  . . . . . . . . . . .	DWord	 00000377 _DATA	
randVal  . . . . . . . . . . . .	DWord	 00000387 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
temp . . . . . . . . . . . . . .	Byte	 00000397 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xCoord3  . . . . . . . . . . . .	DWord	 0000037F _DATA	
xCoord4  . . . . . . . . . . . .	DWord	 00000334 _DATA	
xCoord6  . . . . . . . . . . . .	DWord	 00000341 _DATA	
xCoord7  . . . . . . . . . . . .	DWord	 00000351 _DATA	
xCoord . . . . . . . . . . . . .	DWord	 0000038F _DATA	
xIndex2  . . . . . . . . . . . .	DWord	 000003A4 _DATA	
xIndex3  . . . . . . . . . . . .	DWord	 0000035F _DATA	
xIndex4  . . . . . . . . . . . .	DWord	 0000036B _DATA	
xIndex9  . . . . . . . . . . . .	DWord	 000003AC _DATA	
xIndex . . . . . . . . . . . . .	DWord	 0000039C _DATA	
x  . . . . . . . . . . . . . . .	DWord	 000003B4 _DATA	
yCoord3  . . . . . . . . . . . .	DWord	 0000037B _DATA	
yCoord4  . . . . . . . . . . . .	DWord	 00000330 _DATA	
yCoord6  . . . . . . . . . . . .	DWord	 0000033D _DATA	
yCoord7  . . . . . . . . . . . .	DWord	 0000034D _DATA	
yCoord . . . . . . . . . . . . .	DWord	 0000038B _DATA	
yIndex2  . . . . . . . . . . . .	DWord	 000003A0 _DATA	
yIndex3  . . . . . . . . . . . .	DWord	 0000035B _DATA	
yIndex4  . . . . . . . . . . . .	DWord	 00000367 _DATA	
yIndex9  . . . . . . . . . . . .	DWord	 000003A8 _DATA	
yIndex . . . . . . . . . . . . .	DWord	 00000398 _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   
y  . . . . . . . . . . . . . . .	DWord	 000003B0 _DATA	

	   1 Warnings
	   0 Errors
