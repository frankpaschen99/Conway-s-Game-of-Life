Microsoft (R) Macro Assembler Version 14.16.27026.1	    04/26/19 16:06:20
Source.asm						     Page 1 - 1


				; Conway's Game of Life
				; by frank paschen :)

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				.386
				.model flat,stdcall
Source.asm(6) : warning A4011:multiple .MODEL directives found : .MODEL ignored
				.stack 4096
				ExitProcess proto,dwExitCode:dword

 00000000			.data
 00000000 47 45 4E 45 52		genMsg BYTE "GENERATION #", 0
	   41 54 49 4F 4E
	   20 23 00
 0000000D 00				genCount SBYTE 0

					; Main game board array that will be drawn to the console
 0000000E  00000014 [			GameBoard BYTE 20 DUP(0)
	    00
	   ]
 00000022 = 00000014			Rowsize = ($ - GameBoard)
 00000022  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000036  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 0000004A  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 0000005E  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000072  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000086  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 0000009A  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 000000AE  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 000000C2  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 000000D6  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 000000EA  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 000000FE  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000112  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000126  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 0000013A  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 0000014E  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000162  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000176  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 0000018A  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]

				;-----------------------------------------------------
				; CalculateGeneration
				;
				; Calculates next game board based on game's rules
				; Called each gamestep
				; Receives: N/A
				;
				; Returns: N/A
				;-----------------------------------------------------
 0000019E 00			cellState BYTE 0	; 1 or 0, living or dead
 0000019F 00000000		yCoord4 DWORD 0
 000001A3 00000000		xCoord4 DWORD 0
 000001A7 00000000		count4 DWORD 0
 000001AB 00000000		liveCount2 DWORD 0
 00000000			.code
 00000000			CalculateGeneration PROC

					; copy the gameboard to the backup board

					; LOOP
						; 1. Iterate through the board and calculate the # of living neighbors for each cell
						; 2. Implement GoL rules and update the backup board based on the # of living neighbors
					; Copy the backup board into the gameboard
 00000000  B9 00000014			mov ecx, 20

 00000005				L1:
 00000005  89 0D 000001A7 R			mov count4, ecx
 0000000B  B9 00000014				mov ecx, 20
 00000010					L2:

 00000010  8B 15 0000019F R				mov edx, yCoord4 ; y
 00000016  A1 000001A3 R				mov eax, xCoord4 ; x
							;call GetValueAtCoords ; result stored in al
							;mov cellState, al	; used for implementing rules

 0000001B  E8 0000002A					call CalcLivingNeighbors
 00000020  E8 00000000 E				call DumpRegs
							;mov liveCount2, ebx


 00000025  FF 05 000001A3 R				inc xCoord4
 0000002B  E2 E3				loop L2
 0000002D  8B 0D 000001A7 R				mov ecx, count4
 00000033  E2 D0			loop L1
					
 00000035  C7 05 0000019F R		mov yCoord4, 0
	   00000000
 0000003F  C7 05 000001A3 R		mov xCoord4, 0
	   00000000

 00000049  C3				ret
 0000004A			CalculateGeneration ENDP

				; eax = x, edx = y
 000001AF			.data
 000001AF 00			liveCount BYTE 0	; stores # of living neighbors for each cell
 000001B0 00000000		originalX DWORD 0
 000001B4 00000000		originalY DWORD 0
 0000004A			.code
 0000004A			CalcLivingNeighbors PROC
 0000004A  BB 00000000			mov ebx, 0
 0000004F  A3 000001B0 R		mov originalX, eax
 00000054  89 15 000001B4 R		mov originalY, edx

 0000005A  A1 000001B0 R		mov eax, originalX
 0000005F  8B 15 000001B4 R		mov edx, originalY
 00000065  E8 0000001D			call GetBottomCenter
					.IF (al == 0) || (al == 1)
 0000006A  0A C0	   *	    or	al, al
 0000006C  74 04	   *	    je	@C0002
 0000006E  3C 01	   *	    cmp    al, 001h
 00000070  75 06	   *	    jne    @C0001
 00000072		   *@C0002:
 00000072  00 05 000001AF R			add liveCount, al
					.ENDIF
 00000078		   *@C0001:

 00000078  8B 1D 000001AF R		mov ebx, DWORD PTR liveCount

 0000007E  C3				ret
 0000007F			CalcLivingNeighbors ENDP

				; receives edx=y eax=x 
				; returns al
 0000007F			.code
 0000007F			GetBottomLeft PROC
 0000007F  48				dec eax
 00000080  4A				dec edx
 00000081  E8 0000013E			call GetValueAtCoords
 00000086  C3				ret
 00000087			GetBottomLeft ENDP

 00000087			GetBottomCenter PROC
 00000087  42				inc edx
 00000088  E8 00000137			call GetValueAtCoords
 0000008D  C3				ret
 0000008E			GetBottomCenter ENDP

 0000008E			GetBottomRight PROC
 0000008E  40				inc eax
 0000008F  4A				dec edx
 00000090  E8 0000012F			call GetValueAtCoords
 00000095  C3				ret
 00000096			GetBottomRight ENDP

 00000096			GetLeft PROC
 00000096  48				dec eax
 00000097  E8 00000128			call GetValueAtCoords
 0000009C  C3				ret
 0000009D			GetLeft ENDP

 0000009D			GetRight PROC
 0000009D  40				inc eax
 0000009E  E8 00000121			call GetValueAtCoords
 000000A3  C3				ret
 000000A4			GetRight ENDP

 000000A4			GetTopLeft PROC
 000000A4  48				dec eax
 000000A5  42				inc edx
 000000A6  E8 00000119			call GetValueAtCoords
 000000AB  C3				ret
 000000AC			GetTopLeft ENDP

 000000AC			GetTopCenter PROC
 000000AC  42				inc edx
 000000AD  E8 00000112			call GetValueAtCoords
 000000B2  C3				ret
 000000B3			GetTopCenter ENDP

 000000B3			GetTopRight PROC
 000000B3  40				inc eax
 000000B4  42				inc edx
 000000B5  E8 0000010A			call GetValueAtCoords
 000000BA  C3				ret
 000000BB			GetTopRight ENDP

				;-----------------------------------------------------
				; GenRandomBoard
				;
				; Sets random cells in the gameboard to living or dead.
				; Called before first generation
				; Receives: N/A
				;
				; Returns: N/A
				;-----------------------------------------------------
 000001B8			.data
 000001B8 00000000			yCoord3 DWORD 0
 000001BC 00000000			xCoord3 DWORD 0
 000001C0 00000000			count3 DWORD 0
 000001C4 00000000			randVal DWORD 0
 000000BB			.code
 000000BB			GenRandomBoard PROC
 000000BB  B9 00000014			mov ecx, 20

 000000C0				L1:	; outer loop
 000000C0  89 0D 000001C0 R			mov count3, ecx
 000000C6  B9 00000014				mov ecx, 20
 000000CB					L2: ; inner loop

 000000CB  8B 15 000001B8 R				mov edx, yCoord3	; y
 000000D1  A1 000001BC R				mov eax, xCoord3 ; x

							; preserve eax to use RandomRange
 000000D6  50						push eax
 000000D7  B8 00000002					mov eax, 2

 000000DC  E8 00000000 E				call RandomRange
 000000E1  A3 000001C4 R				mov randVal, eax
 000000E6  58						pop eax

							.IF randVal > 0
 000000E7  83 3D 000001C4 R
	   00		   *	    cmp    randVal, 000h
 000000EE  76 05	   *	    jbe    @C0004
 000000F0  E8 000000FC						call InvertValueAtCoords
							.ENDIF
 000000F5		   *@C0004:

 000000F5  E8 000000CA					call GetValueAtCoords

 000000FA  FF 05 000001BC R				inc xCoord3
 00000100  E2 C9				loop L2
 00000102  8B 0D 000001C0 R				mov ecx, count3
 00000108  E2 B6			loop L1
					
 0000010A  C7 05 000001B8 R		mov yCoord3, 0
	   00000000
 00000114  C7 05 000001BC R		mov xCoord3, 0
	   00000000

 0000011E  C3				ret
 0000011F			GenRandomBoard ENDP
				;-----------------------------------------------------
				; DrawGameBoard
				;
				; Uses cursor to print the gameboard to the console.
				; Called immediately after CalculateGeneration
				; Receives: N/A
				;
				; Returns: N/A
				;-----------------------------------------------------

 000001C8			.data
 000001C8 00000000			yCoord DWORD 0
 000001CC 00000000	xCoord DWORD 0
 000001D0 00000000			count DWORD 0
 000001D4 00				temp BYTE ?
 0000011F			.code
 0000011F			DrawGameBoard PROC
 0000011F  E8 00000000 E		call Clrscr
 00000124  E8 00000000 E		call Crlf
 00000129  B9 00000014			mov ecx, 20

 0000012E				L1:	; outer loop
 0000012E  89 0D 000001D0 R			mov count, ecx
 00000134  B9 00000014				mov ecx, 20
 00000139					L2: ; inner loop

 00000139  8B 15 000001C8 R				mov edx, yCoord	; y
 0000013F  A1 000001CC R				mov eax, xCoord	; x

 00000144  E8 0000007B					call GetValueAtCoords
							
							; TODO: Color these, possible find better ASCII characters
 00000149  A2 000001D4 R				mov temp, al
							.IF temp == 0
 0000014E  80 3D 000001D4 R
	   00		   *	    cmp    temp, 000h
 00000155  75 04	   *	    jne    @C0006
 00000157  B0 B2						mov al, 178
							.ELSEIF temp == 1
 00000159  EB 0B	   *	    jmp    @C0008
 0000015B		   *@C0006:
 0000015B  80 3D 000001D4 R
	   01		   *	    cmp    temp, 001h
 00000162  75 02	   *	    jne    @C0009
 00000164  B0 B0						mov al, 176
							.ENDIF
 00000166		   *@C0009:
 00000166		   *@C0008:

 00000166  E8 00000000 E				call WriteChar

 0000016B  FF 05 000001CC R				inc xCoord

 00000171  E2 C6				loop L2
 00000173  8B 0D 000001D0 R				mov ecx, count
 00000179  E8 00000000 E				call Crlf
 0000017E  E2 AE			loop L1

 00000180  C7 05 000001C8 R		mov yCoord, 0
	   00000000
 0000018A  C7 05 000001CC R		mov xCoord, 0
	   00000000
					
 00000194  C3				ret
 00000195			DrawGameBoard ENDP
				;-----------------------------------------------------
				; IncrementGeneration
				;
				; Prints and increments the generation count.
				; Called immediately after CalculateGeneration
				; Receives: N/A
				;
				; Returns: N/A
				;-----------------------------------------------------
 00000195			IncrementGeneration PROC USES eax edx
 00000195  50		   *	    push   eax
 00000196  52		   *	    push   edx
 00000197  B8 00000000			mov eax, 0
					; increment gen count
 0000019C  FE 05 0000000D R		inc genCount
					; move cursor to top left
 000001A2  B6 00			mov dh, 0	; Y
 000001A4  B2 00			mov dl, 0	; X
 000001A6  E8 00000000 E		call Gotoxy
					; print Generation #:
 000001AB  BA 00000000 R		mov edx, OFFSET genMsg
 000001B0  E8 00000000 E		call WriteString      
					; print actual gen count
 000001B5  A0 0000000D R		mov al, genCount
 000001BA  B4 00			mov ah, 0

 000001BC  E8 00000000 E		call WriteDec

					ret
 000001C1  5A		   *	    pop    edx
 000001C2  58		   *	    pop    eax
 000001C3  C3		   *	    ret    00000h
 000001C4			IncrementGeneration ENDP
				;-----------------------------------------------------
				; GetValueAtCoords
				;
				; Returns value found at index in gameboard.
				; Receives: edx = y coordinate
				;			eax = x coordinate
				; 
				; Returns: al = value at coordinates in array (zero indexed)
				;-----------------------------------------------------
 000001D5			.data
 000001D5 00000000			yIndex DWORD ?
 000001D9 00000000			xIndex DWORD ?
 000001C4			.code
 000001C4			GetValueAtCoords PROC USES esi ebx
 000001C4  56		   *	    push   esi
 000001C5  53		   *	    push   ebx
 000001C6  89 15 000001D5 R		mov yIndex, edx
 000001CC  A3 000001D9 R		mov xIndex, eax

					; store array offset in memory
 000001D1  BB 0000000E R		mov ebx, OFFSET GameBoard ; table offset
					; multiply RowSize and y coordinate
 000001D6  B8 00000014			mov eax, RowSize
 000001DB  F7 25 000001D5 R		mul yIndex	; result of AL * DH stored in EAX
 000001E1  03 D8			add ebx, eax ; row offset
					; add offset and x coordinate to get [X,Y] in array
 000001E3  8B 35 000001D9 R		mov esi, xIndex
 000001E9  B4 00			mov ah, 0	; clear top half of reg NOTE: ONLY NECESSARY FOR WRITEINT PROC. We can just test al for other purposes
 000001EB  8A 04 33			mov al, [ebx + esi] ; al = result

					ret
 000001EE  5B		   *	    pop    ebx
 000001EF  5E		   *	    pop    esi
 000001F0  C3		   *	    ret    00000h
 000001F1			GetValueAtCoords ENDP

				;-----------------------------------------------------
				; GetValueAtCoords
				;
				; Inverts value found at index in gameboard.
				; Receives: edx = y coordinate
				;			eax = x coordinate
				; 
				; Returns: N/A
				;-----------------------------------------------------
 000001DD			.data
 000001DD 00000000			yIndex2 DWORD ?
 000001E1 00000000			xIndex2 DWORD ?
 000001F1			.code
 000001F1			InvertValueAtCoords PROC USES edx eax ebx
 000001F1  52		   *	    push   edx
 000001F2  50		   *	    push   eax
 000001F3  53		   *	    push   ebx
 000001F4  89 15 000001DD R		mov yIndex2, edx
 000001FA  A3 000001E1 R		mov xIndex2, eax

					; same exact thing as GetValueAtCoords
 000001FF  BB 0000000E R		mov ebx, OFFSET GameBoard
 00000204  B8 00000014			mov eax, RowSize
 00000209  F7 25 000001DD R		mul yIndex2
 0000020F  03 D8			add ebx, eax
 00000211  8B 35 000001E1 R		mov esi, xIndex2
 00000217  B4 00			mov ah, 0
 00000219  8A 04 33			mov al, [ebx + esi]

					; invert last bit in AL
					; couldnt figure out a better way to do this
					.IF al == 0001h
 0000021C  3C 01	   *	    cmp    al, 001h
 0000021E  75 04	   *	    jne    @C000B
 00000220  B0 00				mov al, 0000
					.ELSEIF al == 0000h
 00000222  EB 06	   *	    jmp    @C000D
 00000224		   *@C000B:
 00000224  0A C0	   *	    or	al, al
 00000226  75 02	   *	    jne    @C000E
 00000228  B0 01				mov al, 0001h
					.ENDIF
 0000022A		   *@C000E:
 0000022A		   *@C000D:
					
					; move the new value to the array
 0000022A  88 04 33			mov [ebx+esi], al
					ret
 0000022D  5B		   *	    pop    ebx
 0000022E  58		   *	    pop    eax
 0000022F  5A		   *	    pop    edx
 00000230  C3		   *	    ret    00000h
 00000231			InvertValueAtCoords ENDP
				;-----------------------------------------------------
				; main
				;
				; manages timing and procedure calls 
				;-----------------------------------------------------

 00000231			.code
 00000231			main PROC
					; randomize seed and generate a starting board
 00000231  E8 00000000 E		call Randomize
					;call GenRandomBoard

					;mov ecx, 1000	; game will run for 1000 generations
					;L1:
						
						;call CalculateGeneration
 00000236  E8 FFFFFF5A				call IncrementGeneration


 0000023B  B8 00000000				mov eax, 0
 00000240  BA 00000000				mov edx, 0
 00000245  E8 FFFFFFA7				call InvertValueAtCoords
 0000024A  B8 00000000				mov eax, 0
 0000024F  BA 00000001				mov edx, 1
 00000254  E8 FFFFFF98				call InvertValueAtCoords
						
 00000259  E8 FFFFFEC1				call DrawGameBoard
 0000025E  B8 00000000				mov eax, 0
 00000263  BA 00000000				mov edx, 0
 00000268  E8 FFFFFDDD				call CalcLivingNeighbors
 0000026D  E8 00000000 E			call DumpRegs


						;mov eax, 2000	; 200 ms delay between generations
						;call Delay		
					;loop L1

					invoke ExitProcess,0
 00000272  6A 00	   *	    push   +000000000h
 00000274  E8 00000000 E   *	    call   ExitProcess
 00000279			main endp
				end main
Microsoft (R) Macro Assembler Version 14.16.27026.1	    04/26/19 16:06:20
Source.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000001E5 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000279 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CalcLivingNeighbors  . . . . . .	P Near	 0000004A _TEXT	Length= 00000035 Public STDCALL
CalculateGeneration  . . . . . .	P Near	 00000000 _TEXT	Length= 0000004A Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000005 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000010 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawGameBoard  . . . . . . . . .	P Near	 0000011F _TEXT	Length= 00000076 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000012E _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000139 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GenRandomBoard . . . . . . . . .	P Near	 000000BB _TEXT	Length= 00000064 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000000C0 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000000CB _TEXT	
GetBottomCenter  . . . . . . . .	P Near	 00000087 _TEXT	Length= 00000007 Public STDCALL
GetBottomLeft  . . . . . . . . .	P Near	 0000007F _TEXT	Length= 00000008 Public STDCALL
GetBottomRight . . . . . . . . .	P Near	 0000008E _TEXT	Length= 00000008 Public STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLeft  . . . . . . . . . . . .	P Near	 00000096 _TEXT	Length= 00000007 Public STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetRight . . . . . . . . . . . .	P Near	 0000009D _TEXT	Length= 00000007 Public STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTopCenter . . . . . . . . . .	P Near	 000000AC _TEXT	Length= 00000007 Public STDCALL
GetTopLeft . . . . . . . . . . .	P Near	 000000A4 _TEXT	Length= 00000008 Public STDCALL
GetTopRight  . . . . . . . . . .	P Near	 000000B3 _TEXT	Length= 00000008 Public STDCALL
GetValueAtCoords . . . . . . . .	P Near	 000001C4 _TEXT	Length= 0000002D Public STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IncrementGeneration  . . . . . .	P Near	 00000195 _TEXT	Length= 0000002F Public STDCALL
InvertValueAtCoords  . . . . . .	P Near	 000001F1 _TEXT	Length= 00000040 Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000231 _TEXT	Length= 00000048 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GameBoard  . . . . . . . . . . .	Byte	 0000000E _DATA	
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
Rowsize  . . . . . . . . . . . .	Number	 00000014h   
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cellState  . . . . . . . . . . .	Byte	 0000019E _DATA	
count3 . . . . . . . . . . . . .	DWord	 000001C0 _DATA	
count4 . . . . . . . . . . . . .	DWord	 000001A7 _DATA	
count  . . . . . . . . . . . . .	DWord	 000001D0 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
genCount . . . . . . . . . . . .	Byte	 0000000D _DATA	
genMsg . . . . . . . . . . . . .	Byte	 00000000 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
liveCount2 . . . . . . . . . . .	DWord	 000001AB _DATA	
liveCount  . . . . . . . . . . .	Byte	 000001AF _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
originalX  . . . . . . . . . . .	DWord	 000001B0 _DATA	
originalY  . . . . . . . . . . .	DWord	 000001B4 _DATA	
randVal  . . . . . . . . . . . .	DWord	 000001C4 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
temp . . . . . . . . . . . . . .	Byte	 000001D4 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xCoord3  . . . . . . . . . . . .	DWord	 000001BC _DATA	
xCoord4  . . . . . . . . . . . .	DWord	 000001A3 _DATA	
xCoord . . . . . . . . . . . . .	DWord	 000001CC _DATA	
xIndex2  . . . . . . . . . . . .	DWord	 000001E1 _DATA	
xIndex . . . . . . . . . . . . .	DWord	 000001D9 _DATA	
yCoord3  . . . . . . . . . . . .	DWord	 000001B8 _DATA	
yCoord4  . . . . . . . . . . . .	DWord	 0000019F _DATA	
yCoord . . . . . . . . . . . . .	DWord	 000001C8 _DATA	
yIndex2  . . . . . . . . . . . .	DWord	 000001DD _DATA	
yIndex . . . . . . . . . . . . .	DWord	 000001D5 _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
