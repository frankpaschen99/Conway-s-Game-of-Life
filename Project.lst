Microsoft (R) Macro Assembler Version 14.16.27026.1	    04/26/19 01:31:27
Source.asm						     Page 1 - 1


				; by frank paschen :)

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				.386
				.model flat,stdcall
Source.asm(5) : warning A4011:multiple .MODEL directives found : .MODEL ignored
				.stack 4096
				ExitProcess proto,dwExitCode:dword

 00000000			.data
 00000000 47 45 4E 45 52		GenMsg BYTE "GENERATION #", 0
	   41 54 49 4F 4E
	   20 23 00
 0000000D 00				GenCount SBYTE 0

					; Main game board array that will be drawn to the console
 0000000E  00000014 [			GameBoard BYTE 20 DUP(0)
	    00
	   ]
 00000022 = 00000014			Rowsize = ($ - GameBoard)
 00000022  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000036  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 0000004A  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 0000005E  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000072  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000086  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 0000009A  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 000000AE  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 000000C2  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 000000D6  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 000000EA  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 000000FE  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000112  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000126  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 0000013A  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 0000014E  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000162  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 00000176  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]
 0000018A  00000014 [					  BYTE 20 DUP(0)
	    00
	   ]

 00000000			.code
				;-----------------------------------------------------
				; CalculateGeneration
				;
				; Calculates next game board based on game's rules
				; Called each gamestep
				; Receives: N/A
				;
				; Returns: N/A
				;-----------------------------------------------------
 00000000			CalculateGeneration PROC

					; copy the gameboard to the backup board

					; LOOP
						; 1. Iterate through the board and calculate the # of living neighbors for each cell
						; 2. Implement GoL rules and update the backup board based on the # of living neighbors
					; Copy the backup board into the gameboard
 00000000  C3				ret
 00000001			CalculateGeneration ENDP
				;-----------------------------------------------------
				; GenRandomBoard
				;
				; Sets random cells in the gameboard to living or dead.
				; Called before first generation
				; Receives: N/A
				;
				; Returns: N/A
				;-----------------------------------------------------
 0000019E			.data
 0000019E 00000000			yCoord3 DWORD 0
 000001A2 00000000			xCoord3 DWORD 0
 000001A6 00000000			count3 DWORD 0
 000001AA 00000000			randVal DWORD 0
 00000001			.code
 00000001			GenRandomBoard PROC
 00000001  B9 00000014			mov ecx, 20

 00000006				L1:	; outer loop
 00000006  89 0D 000001A6 R			mov count3, ecx
 0000000C  B9 00000014				mov ecx, 20
 00000011					L2: ; inner loop

 00000011  8B 15 0000019E R				mov edx, yCoord3	; y
 00000017  A1 000001A2 R				mov eax, xCoord3 ; x

							; preserve eax to use RandomRange
 0000001C  50						push eax
 0000001D  B8 00000002					mov eax, 2

 00000022  E8 00000000 E				call RandomRange
 00000027  A3 000001AA R				mov randVal, eax
 0000002C  58						pop eax

							.IF randVal > 0
 0000002D  83 3D 000001AA R
	   00		   *	    cmp    randVal, 000h
 00000034  76 05	   *	    jbe    @C0001
 00000036  E8 000000FC						call InvertValueAtCoords
							.ENDIF
 0000003B		   *@C0001:

 0000003B  E8 000000CA					call GetValueAtCoords

 00000040  FF 05 000001A2 R				inc xCoord3
 00000046  E2 C9				loop L2
 00000048  8B 0D 000001A6 R				mov ecx, count3
 0000004E  E2 B6			loop L1
					
 00000050  C7 05 0000019E R		mov yCoord3, 0
	   00000000
 0000005A  C7 05 000001A2 R		mov xCoord3, 0
	   00000000

 00000064  C3				ret
 00000065			GenRandomBoard ENDP
				;-----------------------------------------------------
				; DrawGameBoard
				;
				; Uses cursor to print the gameboard to the console.
				; Called immediately after CalculateGeneration
				; Receives: N/A
				;
				; Returns: N/A
				;-----------------------------------------------------

 000001AE			.data
 000001AE 00000000			yCoord DWORD 0
 000001B2 00000000			xCoord DWORD 0
 000001B6 00000000			count DWORD 0
 000001BA 00				temp BYTE ?
 00000065			.code
 00000065			DrawGameBoard PROC
 00000065  E8 00000000 E		call Clrscr
 0000006A  E8 00000000 E		call Crlf
 0000006F  B9 00000014			mov ecx, 20

 00000074				L1:	; outer loop
 00000074  89 0D 000001B6 R			mov count, ecx
 0000007A  B9 00000014				mov ecx, 20
 0000007F					L2: ; inner loop

 0000007F  8B 15 000001AE R				mov edx, yCoord	; y
 00000085  A1 000001B2 R				mov eax, xCoord	; x

 0000008A  E8 0000007B					call GetValueAtCoords
							
							; TODO: Color these, possible find better ASCII characters
 0000008F  A2 000001BA R				mov temp, al
							.IF temp == 0
 00000094  80 3D 000001BA R
	   00		   *	    cmp    temp, 000h
 0000009B  75 04	   *	    jne    @C0003
 0000009D  B0 B2						mov al, 178
							.ELSEIF temp == 1
 0000009F  EB 0B	   *	    jmp    @C0005
 000000A1		   *@C0003:
 000000A1  80 3D 000001BA R
	   01		   *	    cmp    temp, 001h
 000000A8  75 02	   *	    jne    @C0006
 000000AA  B0 B0						mov al, 176
							.ENDIF
 000000AC		   *@C0006:
 000000AC		   *@C0005:

 000000AC  E8 00000000 E				call WriteChar

 000000B1  FF 05 000001B2 R				inc xCoord

 000000B7  E2 C6				loop L2
 000000B9  8B 0D 000001B6 R				mov ecx, count
 000000BF  E8 00000000 E				call Crlf
 000000C4  E2 AE			loop L1

 000000C6  C7 05 000001AE R		mov yCoord, 0
	   00000000
 000000D0  C7 05 000001B2 R		mov xCoord, 0
	   00000000
					
 000000DA  C3				ret
 000000DB			DrawGameBoard ENDP
				;-----------------------------------------------------
				; IncrementGeneration
				;
				; Prints and increments the generation count.
				; Called immediately after CalculateGeneration
				; Receives: N/A
				;
				; Returns: N/A
				;-----------------------------------------------------
 000000DB			IncrementGeneration PROC USES eax edx
 000000DB  50		   *	    push   eax
 000000DC  52		   *	    push   edx
 000000DD  B8 00000000			mov eax, 0
					; increment gen count
 000000E2  FE 05 0000000D R		inc GenCount
					; move cursor to top left
 000000E8  B6 00			mov dh, 0	; Y
 000000EA  B2 00			mov dl, 0	; X
 000000EC  E8 00000000 E		call Gotoxy
					; print Generation #:
 000000F1  BA 00000000 R		mov edx, OFFSET GenMsg
 000000F6  E8 00000000 E		call WriteString      
					; print actual gen count
 000000FB  A0 0000000D R		mov al, GenCount
 00000100  B4 00			mov ah, 0

 00000102  E8 00000000 E		call WriteDec

					ret
 00000107  5A		   *	    pop    edx
 00000108  58		   *	    pop    eax
 00000109  C3		   *	    ret    00000h
 0000010A			IncrementGeneration ENDP
				;-----------------------------------------------------
				; GetValueAtCoords
				;
				; Returns value found at index in gameboard.
				; Receives: edx = y coordinate
				;			eax = x coordinate
				; 
				; Returns: al = value at coordinates in array (zero indexed)
				;-----------------------------------------------------
 000001BB			.data
 000001BB 00000000			yIndex DWORD ?
 000001BF 00000000			xIndex DWORD ?
 0000010A			.code
 0000010A			GetValueAtCoords PROC USES esi ebx
 0000010A  56		   *	    push   esi
 0000010B  53		   *	    push   ebx
 0000010C  89 15 000001BB R		mov yIndex, edx
 00000112  A3 000001BF R		mov xIndex, eax

					; store array offset in memory
 00000117  BB 0000000E R		mov ebx, OFFSET GameBoard ; table offset
					; multiply RowSize and y coordinate
 0000011C  B8 00000014			mov eax, RowSize
 00000121  F7 25 000001BB R		mul yIndex	; result of AL * DH stored in EAX
 00000127  03 D8			add ebx, eax ; row offset
					; add offset and x coordinate to get [X,Y] in array
 00000129  8B 35 000001BF R		mov esi, xIndex
 0000012F  B4 00			mov ah, 0	; clear top half of reg NOTE: ONLY NECESSARY FOR WRITEINT PROC. We can just test al for other purposes
 00000131  8A 04 33			mov al, [ebx + esi] ; al = result

					ret
 00000134  5B		   *	    pop    ebx
 00000135  5E		   *	    pop    esi
 00000136  C3		   *	    ret    00000h
 00000137			GetValueAtCoords ENDP

				;-----------------------------------------------------
				; GetValueAtCoords
				;
				; Inverts value found at index in gameboard.
				; Receives: edx = y coordinate
				;			eax = x coordinate
				; 
				; Returns: N/A
				;-----------------------------------------------------
 000001C3			.data
 000001C3 00000000			yIndex2 DWORD ?
 000001C7 00000000			xIndex2 DWORD ?
 00000137			.code
 00000137			InvertValueAtCoords PROC USES edx eax ebx
 00000137  52		   *	    push   edx
 00000138  50		   *	    push   eax
 00000139  53		   *	    push   ebx
 0000013A  89 15 000001C3 R		mov yIndex2, edx
 00000140  A3 000001C7 R		mov xIndex2, eax

					; same exact thing as GetValueAtCoords
 00000145  BB 0000000E R		mov ebx, OFFSET GameBoard
 0000014A  B8 00000014			mov eax, RowSize
 0000014F  F7 25 000001C3 R		mul yIndex2
 00000155  03 D8			add ebx, eax
 00000157  8B 35 000001C7 R		mov esi, xIndex2
 0000015D  B4 00			mov ah, 0
 0000015F  8A 04 33			mov al, [ebx + esi]

					; invert last bit in AL
					; couldnt figure out a better way to do this
					.IF al == 0001h
 00000162  3C 01	   *	    cmp    al, 001h
 00000164  75 04	   *	    jne    @C0008
 00000166  B0 00				mov al, 0000
					.ELSEIF al == 0000h
 00000168  EB 06	   *	    jmp    @C000A
 0000016A		   *@C0008:
 0000016A  0A C0	   *	    or	al, al
 0000016C  75 02	   *	    jne    @C000B
 0000016E  B0 01				mov al, 0001h
					.ENDIF
 00000170		   *@C000B:
 00000170		   *@C000A:
					
					; move the new value to the array
 00000170  88 04 33			mov [ebx+esi], al
					ret
 00000173  5B		   *	    pop    ebx
 00000174  58		   *	    pop    eax
 00000175  5A		   *	    pop    edx
 00000176  C3		   *	    ret    00000h
 00000177			InvertValueAtCoords ENDP
				;-----------------------------------------------------
				; main
				;
				; manages timing and procedure calls 
				;-----------------------------------------------------

 00000177			.code
 00000177			main PROC
					; randomize seed and generate a starting board
 00000177  E8 00000000 E		call Randomize
					

 0000017C  B9 000003E8			mov ecx, 1000	; game will run for 1000 generations
 00000181				L1:
 00000181  E8 FFFFFE7B				call GenRandomBoard
 00000186  E8 FFFFFEDA				call DrawGameBoard	
 0000018B  E8 FFFFFF4B				call IncrementGeneration
 00000190  B8 000000C8				mov eax, 200	; 200 ms delay between generations
 00000195  E8 00000000 E			call Delay		
 0000019A  E2 E5			loop L1

					invoke ExitProcess,0
 0000019C  6A 00	   *	    push   +000000000h
 0000019E  E8 00000000 E   *	    call   ExitProcess
 000001A3			main endp
				end main
Microsoft (R) Macro Assembler Version 14.16.27026.1	    04/26/19 01:31:27
Source.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000001CB Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001A3 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CalculateGeneration  . . . . . .	P Near	 00000000 _TEXT	Length= 00000001 Public STDCALL
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawGameBoard  . . . . . . . . .	P Near	 00000065 _TEXT	Length= 00000076 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000074 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 0000007F _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GenRandomBoard . . . . . . . . .	P Near	 00000001 _TEXT	Length= 00000064 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000006 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000011 _TEXT	
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetValueAtCoords . . . . . . . .	P Near	 0000010A _TEXT	Length= 0000002D Public STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IncrementGeneration  . . . . . .	P Near	 000000DB _TEXT	Length= 0000002F Public STDCALL
InvertValueAtCoords  . . . . . .	P Near	 00000137 _TEXT	Length= 00000040 Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000177 _TEXT	Length= 0000002C Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000181 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GameBoard  . . . . . . . . . . .	Byte	 0000000E _DATA	
GenCount . . . . . . . . . . . .	Byte	 0000000D _DATA	
GenMsg . . . . . . . . . . . . .	Byte	 00000000 _DATA	
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
Rowsize  . . . . . . . . . . . .	Number	 00000014h   
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
count3 . . . . . . . . . . . . .	DWord	 000001A6 _DATA	
count  . . . . . . . . . . . . .	DWord	 000001B6 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
randVal  . . . . . . . . . . . .	DWord	 000001AA _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
temp . . . . . . . . . . . . . .	Byte	 000001BA _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xCoord3  . . . . . . . . . . . .	DWord	 000001A2 _DATA	
xCoord . . . . . . . . . . . . .	DWord	 000001B2 _DATA	
xIndex2  . . . . . . . . . . . .	DWord	 000001C7 _DATA	
xIndex . . . . . . . . . . . . .	DWord	 000001BF _DATA	
yCoord3  . . . . . . . . . . . .	DWord	 0000019E _DATA	
yCoord . . . . . . . . . . . . .	DWord	 000001AE _DATA	
yIndex2  . . . . . . . . . . . .	DWord	 000001C3 _DATA	
yIndex . . . . . . . . . . . . .	DWord	 000001BB _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
